// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to libpcap
class LibPcap {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibPcap(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibPcap.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int imaxabs(
    int j,
  ) {
    return _imaxabs(
      j,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int wcstoumax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int> _getdate_err =
      _lookup<ffi.Int>('getdate_err');

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<ffi.Long> _timezone1 = _lookup<ffi.Long>('timezone');

  int get timezone1 => _timezone1.value;

  set timezone1(int value) => _timezone1.value = value;

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    return _asctime(
      arg0,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _ctime(
      arg0,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  double difftime(
    int arg0,
    int arg1,
  ) {
    return _difftime(
      arg0,
      arg1,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  ffi.Pointer<tm> getdate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getdate(
      arg0,
    );
  }

  late final _getdatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>>(
      'getdate');
  late final _getdate =
      _getdatePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _gmtime(
      arg0,
    );
  }

  late final _gmtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _localtime(
      arg0,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    return _mktime(
      arg0,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> strptime(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strptimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strptime');
  late final _strptime = _strptimePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>();

  int time(
    ffi.Pointer<time_t> arg0,
  ) {
    return _time(
      arg0,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  int posix2time(
    int arg0,
  ) {
    return _posix2time(
      arg0,
    );
  }

  late final _posix2timePtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('posix2time');
  late final _posix2time = _posix2timePtr.asFunction<int Function(int)>();

  void tzsetwall() {
    return _tzsetwall();
  }

  late final _tzsetwallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzsetwall');
  late final _tzsetwall = _tzsetwallPtr.asFunction<void Function()>();

  int time2posix(
    int arg0,
  ) {
    return _time2posix(
      arg0,
    );
  }

  late final _time2posixPtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('time2posix');
  late final _time2posix = _time2posixPtr.asFunction<int Function(int)>();

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    return _timelocal(
      arg0,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    return _timegm(
      arg0,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int32, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int32, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime_nsec_np(
    int __clock_id,
  ) {
    return _clock_gettime_nsec_np(
      __clock_id,
    );
  }

  late final _clock_gettime_nsec_npPtr =
      _lookup<ffi.NativeFunction<__uint64_t Function(ffi.Int32)>>(
          'clock_gettime_nsec_np');
  late final _clock_gettime_nsec_np =
      _clock_gettime_nsec_npPtr.asFunction<int Function(int)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int32, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    return _timespec_get(
      ts,
      base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  int adjtime(
    ffi.Pointer<timeval> arg0,
    ffi.Pointer<timeval> arg1,
  ) {
    return _adjtime(
      arg0,
      arg1,
    );
  }

  late final _adjtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>('adjtime');
  late final _adjtime = _adjtimePtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>();

  int futimes(
    int arg0,
    ffi.Pointer<timeval> arg1,
  ) {
    return _futimes(
      arg0,
      arg1,
    );
  }

  late final _futimesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timeval>)>>(
      'futimes');
  late final _futimes =
      _futimesPtr.asFunction<int Function(int, ffi.Pointer<timeval>)>();

  int lutimes(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<timeval> arg1,
  ) {
    return _lutimes(
      arg0,
      arg1,
    );
  }

  late final _lutimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('lutimes');
  late final _lutimes = _lutimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int settimeofday(
    ffi.Pointer<timeval> arg0,
    ffi.Pointer<timezone> arg1,
  ) {
    return _settimeofday(
      arg0,
      arg1,
    );
  }

  late final _settimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timezone>)>>('settimeofday');
  late final _settimeofday = _settimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timezone>)>();

  int getitimer(
    int arg0,
    ffi.Pointer<itimerval> arg1,
  ) {
    return _getitimer(
      arg0,
      arg1,
    );
  }

  late final _getitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<itimerval>)>>('getitimer');
  late final _getitimer =
      _getitimerPtr.asFunction<int Function(int, ffi.Pointer<itimerval>)>();

  int gettimeofday(
    ffi.Pointer<timeval> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _gettimeofday(
      arg0,
      arg1,
    );
  }

  late final _gettimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>>('gettimeofday');
  late final _gettimeofday = _gettimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>();

  int select(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timeval> arg4,
  ) {
    return _select(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int setitimer(
    int arg0,
    ffi.Pointer<itimerval> arg1,
    ffi.Pointer<itimerval> arg2,
  ) {
    return _setitimer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<itimerval>,
              ffi.Pointer<itimerval>)>>('setitimer');
  late final _setitimer = _setitimerPtr.asFunction<
      int Function(int, ffi.Pointer<itimerval>, ffi.Pointer<itimerval>)>();

  int utimes(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<timeval> arg1,
  ) {
    return _utimes(
      arg0,
      arg1,
    );
  }

  late final _utimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('utimes');
  late final _utimes = _utimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int accept(
    int arg0,
    ffi.Pointer<sockaddr> arg1,
    ffi.Pointer<socklen_t> arg2,
  ) {
    return _accept(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('accept');
  late final _accept = _acceptPtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int bind(
    int arg0,
    ffi.Pointer<sockaddr> arg1,
    int arg2,
  ) {
    return _bind(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('bind');
  late final _bind =
      _bindPtr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int connect(
    int arg0,
    ffi.Pointer<sockaddr> arg1,
    int arg2,
  ) {
    return _connect(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>>('connect');
  late final _connect =
      _connectPtr.asFunction<int Function(int, ffi.Pointer<sockaddr>, int)>();

  int getpeername(
    int arg0,
    ffi.Pointer<sockaddr> arg1,
    ffi.Pointer<socklen_t> arg2,
  ) {
    return _getpeername(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getpeernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getpeername');
  late final _getpeername = _getpeernamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int getsockname(
    int arg0,
    ffi.Pointer<sockaddr> arg1,
    ffi.Pointer<socklen_t> arg2,
  ) {
    return _getsockname(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsocknamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>,
              ffi.Pointer<socklen_t>)>>('getsockname');
  late final _getsockname = _getsocknamePtr.asFunction<
      int Function(int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>();

  int getsockopt(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<socklen_t> arg4,
  ) {
    return _getsockopt(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<socklen_t>)>>('getsockopt');
  late final _getsockopt = _getsockoptPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<socklen_t>)>();

  int listen(
    int arg0,
    int arg1,
  ) {
    return _listen(
      arg0,
      arg1,
    );
  }

  late final _listenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('listen');
  late final _listen = _listenPtr.asFunction<int Function(int, int)>();

  int recv(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    int arg3,
  ) {
    return _recv(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _recvPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('recv');
  late final _recv =
      _recvPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int recvfrom(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<sockaddr> arg4,
    ffi.Pointer<socklen_t> arg5,
  ) {
    return _recvfrom(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _recvfromPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int,
              ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>>('recvfrom');
  late final _recvfrom = _recvfromPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>,
          ffi.Pointer<socklen_t>)>();

  int recvmsg(
    int arg0,
    ffi.Pointer<msghdr> arg1,
    int arg2,
  ) {
    return _recvmsg(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _recvmsgPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('recvmsg');
  late final _recvmsg =
      _recvmsgPtr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int send(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    int arg3,
  ) {
    return _send(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sendPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>>('send');
  late final _send =
      _sendPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int sendmsg(
    int arg0,
    ffi.Pointer<msghdr> arg1,
    int arg2,
  ) {
    return _sendmsg(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sendmsgPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>>('sendmsg');
  late final _sendmsg =
      _sendmsgPtr.asFunction<int Function(int, ffi.Pointer<msghdr>, int)>();

  int sendto(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<sockaddr> arg4,
    int arg5,
  ) {
    return _sendto(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _sendtoPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int,
              ffi.Pointer<sockaddr>, socklen_t)>>('sendto');
  late final _sendto = _sendtoPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<sockaddr>, int)>();

  int setsockopt(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
  ) {
    return _setsockopt(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _setsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              socklen_t)>>('setsockopt');
  late final _setsockopt = _setsockoptPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Void>, int)>();

  int shutdown(
    int arg0,
    int arg1,
  ) {
    return _shutdown(
      arg0,
      arg1,
    );
  }

  late final _shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'shutdown');
  late final _shutdown = _shutdownPtr.asFunction<int Function(int, int)>();

  int sockatmark(
    int arg0,
  ) {
    return _sockatmark(
      arg0,
    );
  }

  late final _sockatmarkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sockatmark');
  late final _sockatmark = _sockatmarkPtr.asFunction<int Function(int)>();

  int socket(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _socket(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _socketPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'socket');
  late final _socket = _socketPtr.asFunction<int Function(int, int, int)>();

  int socketpair(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _socketpair(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _socketpairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>('socketpair');
  late final _socketpair = _socketpairPtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Int>)>();

  int sendfile(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<off_t> arg3,
    ffi.Pointer<sf_hdtr> arg4,
    int arg5,
  ) {
    return _sendfile(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _sendfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, off_t, ffi.Pointer<off_t>,
              ffi.Pointer<sf_hdtr>, ffi.Int)>>('sendfile');
  late final _sendfile = _sendfilePtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<off_t>, ffi.Pointer<sf_hdtr>, int)>();

  void pfctlinput(
    int arg0,
    ffi.Pointer<sockaddr> arg1,
  ) {
    return _pfctlinput(
      arg0,
      arg1,
    );
  }

  late final _pfctlinputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<sockaddr>)>>('pfctlinput');
  late final _pfctlinput =
      _pfctlinputPtr.asFunction<void Function(int, ffi.Pointer<sockaddr>)>();

  int connectx(
    int arg0,
    ffi.Pointer<sa_endpoints_t> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<iovec> arg4,
    int arg5,
    ffi.Pointer<ffi.Size> arg6,
    ffi.Pointer<sae_connid_t> arg7,
  ) {
    return _connectx(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _connectxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<sa_endpoints_t>,
              sae_associd_t,
              ffi.UnsignedInt,
              ffi.Pointer<iovec>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<sae_connid_t>)>>('connectx');
  late final _connectx = _connectxPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<sa_endpoints_t>,
          int,
          int,
          ffi.Pointer<iovec>,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<sae_connid_t>)>();

  int disconnectx(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _disconnectx(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _disconnectxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, sae_associd_t, sae_connid_t)>>('disconnectx');
  late final _disconnectx =
      _disconnectxPtr.asFunction<int Function(int, int, int)>();

  int setipv4sourcefilter(
    int arg0,
    in_addr arg1,
    in_addr arg2,
    int arg3,
    int arg4,
    ffi.Pointer<in_addr> arg5,
  ) {
    return _setipv4sourcefilter(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _setipv4sourcefilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, in_addr, in_addr, ffi.Uint32, ffi.Uint32,
              ffi.Pointer<in_addr>)>>('setipv4sourcefilter');
  late final _setipv4sourcefilter = _setipv4sourcefilterPtr.asFunction<
      int Function(int, in_addr, in_addr, int, int, ffi.Pointer<in_addr>)>();

  int getipv4sourcefilter(
    int arg0,
    in_addr arg1,
    in_addr arg2,
    ffi.Pointer<ffi.Uint32> arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<in_addr> arg5,
  ) {
    return _getipv4sourcefilter(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _getipv4sourcefilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              in_addr,
              in_addr,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<in_addr>)>>('getipv4sourcefilter');
  late final _getipv4sourcefilter = _getipv4sourcefilterPtr.asFunction<
      int Function(int, in_addr, in_addr, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>, ffi.Pointer<in_addr>)>();

  int setsourcefilter(
    int arg0,
    int arg1,
    ffi.Pointer<sockaddr> arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<sockaddr_storage> arg6,
  ) {
    return _setsourcefilter(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _setsourcefilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Uint32,
              ffi.Pointer<sockaddr>,
              socklen_t,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<sockaddr_storage>)>>('setsourcefilter');
  late final _setsourcefilter = _setsourcefilterPtr.asFunction<
      int Function(int, int, ffi.Pointer<sockaddr>, int, int, int,
          ffi.Pointer<sockaddr_storage>)>();

  int getsourcefilter(
    int arg0,
    int arg1,
    ffi.Pointer<sockaddr> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
    ffi.Pointer<sockaddr_storage> arg6,
  ) {
    return _getsourcefilter(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _getsourcefilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Uint32,
              ffi.Pointer<sockaddr>,
              socklen_t,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<sockaddr_storage>)>>('getsourcefilter');
  late final _getsourcefilter = _getsourcefilterPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<sockaddr>,
          int,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<sockaddr_storage>)>();

  late final ffi.Pointer<in6_addr> _in6addr_any =
      _lookup<in6_addr>('in6addr_any');

  in6_addr get in6addr_any => _in6addr_any.ref;

  late final ffi.Pointer<in6_addr> _in6addr_loopback =
      _lookup<in6_addr>('in6addr_loopback');

  in6_addr get in6addr_loopback => _in6addr_loopback.ref;

  late final ffi.Pointer<in6_addr> _in6addr_nodelocal_allnodes =
      _lookup<in6_addr>('in6addr_nodelocal_allnodes');

  in6_addr get in6addr_nodelocal_allnodes => _in6addr_nodelocal_allnodes.ref;

  late final ffi.Pointer<in6_addr> _in6addr_linklocal_allnodes =
      _lookup<in6_addr>('in6addr_linklocal_allnodes');

  in6_addr get in6addr_linklocal_allnodes => _in6addr_linklocal_allnodes.ref;

  late final ffi.Pointer<in6_addr> _in6addr_linklocal_allrouters =
      _lookup<in6_addr>('in6addr_linklocal_allrouters');

  in6_addr get in6addr_linklocal_allrouters =>
      _in6addr_linklocal_allrouters.ref;

  late final ffi.Pointer<in6_addr> _in6addr_linklocal_allv2routers =
      _lookup<in6_addr>('in6addr_linklocal_allv2routers');

  in6_addr get in6addr_linklocal_allv2routers =>
      _in6addr_linklocal_allv2routers.ref;

  int inet6_option_space(
    int arg0,
  ) {
    return _inet6_option_space(
      arg0,
    );
  }

  late final _inet6_option_spacePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'inet6_option_space');
  late final _inet6_option_space =
      _inet6_option_spacePtr.asFunction<int Function(int)>();

  int inet6_option_init(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Pointer<cmsghdr>> arg1,
    int arg2,
  ) {
    return _inet6_option_init(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _inet6_option_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<cmsghdr>>,
              ffi.Int)>>('inet6_option_init');
  late final _inet6_option_init = _inet6_option_initPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<cmsghdr>>, int)>();

  int inet6_option_append(
    ffi.Pointer<cmsghdr> arg0,
    ffi.Pointer<__uint8_t> arg1,
    int arg2,
    int arg3,
  ) {
    return _inet6_option_append(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _inet6_option_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cmsghdr>, ffi.Pointer<__uint8_t>,
              ffi.Int, ffi.Int)>>('inet6_option_append');
  late final _inet6_option_append = _inet6_option_appendPtr.asFunction<
      int Function(ffi.Pointer<cmsghdr>, ffi.Pointer<__uint8_t>, int, int)>();

  ffi.Pointer<__uint8_t> inet6_option_alloc(
    ffi.Pointer<cmsghdr> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _inet6_option_alloc(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _inet6_option_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<__uint8_t> Function(ffi.Pointer<cmsghdr>, ffi.Int,
              ffi.Int, ffi.Int)>>('inet6_option_alloc');
  late final _inet6_option_alloc = _inet6_option_allocPtr.asFunction<
      ffi.Pointer<__uint8_t> Function(ffi.Pointer<cmsghdr>, int, int, int)>();

  int inet6_option_next(
    ffi.Pointer<cmsghdr> arg0,
    ffi.Pointer<ffi.Pointer<__uint8_t>> arg1,
  ) {
    return _inet6_option_next(
      arg0,
      arg1,
    );
  }

  late final _inet6_option_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cmsghdr>,
              ffi.Pointer<ffi.Pointer<__uint8_t>>)>>('inet6_option_next');
  late final _inet6_option_next = _inet6_option_nextPtr.asFunction<
      int Function(
          ffi.Pointer<cmsghdr>, ffi.Pointer<ffi.Pointer<__uint8_t>>)>();

  int inet6_option_find(
    ffi.Pointer<cmsghdr> arg0,
    ffi.Pointer<ffi.Pointer<__uint8_t>> arg1,
    int arg2,
  ) {
    return _inet6_option_find(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _inet6_option_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cmsghdr>,
              ffi.Pointer<ffi.Pointer<__uint8_t>>,
              ffi.Int)>>('inet6_option_find');
  late final _inet6_option_find = _inet6_option_findPtr.asFunction<
      int Function(
          ffi.Pointer<cmsghdr>, ffi.Pointer<ffi.Pointer<__uint8_t>>, int)>();

  int inet6_rthdr_space(
    int arg0,
    int arg1,
  ) {
    return _inet6_rthdr_space(
      arg0,
      arg1,
    );
  }

  late final _inet6_rthdr_spacePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Int, ffi.Int)>>(
          'inet6_rthdr_space');
  late final _inet6_rthdr_space =
      _inet6_rthdr_spacePtr.asFunction<int Function(int, int)>();

  ffi.Pointer<cmsghdr> inet6_rthdr_init(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _inet6_rthdr_init(
      arg0,
      arg1,
    );
  }

  late final _inet6_rthdr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cmsghdr> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('inet6_rthdr_init');
  late final _inet6_rthdr_init = _inet6_rthdr_initPtr
      .asFunction<ffi.Pointer<cmsghdr> Function(ffi.Pointer<ffi.Void>, int)>();

  int inet6_rthdr_add(
    ffi.Pointer<cmsghdr> arg0,
    ffi.Pointer<in6_addr> arg1,
    int arg2,
  ) {
    return _inet6_rthdr_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _inet6_rthdr_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<cmsghdr>, ffi.Pointer<in6_addr>,
              ffi.UnsignedInt)>>('inet6_rthdr_add');
  late final _inet6_rthdr_add = _inet6_rthdr_addPtr.asFunction<
      int Function(ffi.Pointer<cmsghdr>, ffi.Pointer<in6_addr>, int)>();

  int inet6_rthdr_lasthop(
    ffi.Pointer<cmsghdr> arg0,
    int arg1,
  ) {
    return _inet6_rthdr_lasthop(
      arg0,
      arg1,
    );
  }

  late final _inet6_rthdr_lasthopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<cmsghdr>, ffi.UnsignedInt)>>('inet6_rthdr_lasthop');
  late final _inet6_rthdr_lasthop = _inet6_rthdr_lasthopPtr
      .asFunction<int Function(ffi.Pointer<cmsghdr>, int)>();

  int inet6_rthdr_segments(
    ffi.Pointer<cmsghdr> arg0,
  ) {
    return _inet6_rthdr_segments(
      arg0,
    );
  }

  late final _inet6_rthdr_segmentsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cmsghdr>)>>(
          'inet6_rthdr_segments');
  late final _inet6_rthdr_segments =
      _inet6_rthdr_segmentsPtr.asFunction<int Function(ffi.Pointer<cmsghdr>)>();

  ffi.Pointer<in6_addr> inet6_rthdr_getaddr(
    ffi.Pointer<cmsghdr> arg0,
    int arg1,
  ) {
    return _inet6_rthdr_getaddr(
      arg0,
      arg1,
    );
  }

  late final _inet6_rthdr_getaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<in6_addr> Function(
              ffi.Pointer<cmsghdr>, ffi.Int)>>('inet6_rthdr_getaddr');
  late final _inet6_rthdr_getaddr = _inet6_rthdr_getaddrPtr
      .asFunction<ffi.Pointer<in6_addr> Function(ffi.Pointer<cmsghdr>, int)>();

  int inet6_rthdr_getflags(
    ffi.Pointer<cmsghdr> arg0,
    int arg1,
  ) {
    return _inet6_rthdr_getflags(
      arg0,
      arg1,
    );
  }

  late final _inet6_rthdr_getflagsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cmsghdr>, ffi.Int)>>(
      'inet6_rthdr_getflags');
  late final _inet6_rthdr_getflags = _inet6_rthdr_getflagsPtr
      .asFunction<int Function(ffi.Pointer<cmsghdr>, int)>();

  int inet6_opt_init(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _inet6_opt_init(
      arg0,
      arg1,
    );
  }

  late final _inet6_opt_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, socklen_t)>>('inet6_opt_init');
  late final _inet6_opt_init =
      _inet6_opt_initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int inet6_opt_append(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg6,
  ) {
    return _inet6_opt_append(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _inet6_opt_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              socklen_t,
              ffi.Int,
              __uint8_t,
              socklen_t,
              __uint8_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('inet6_opt_append');
  late final _inet6_opt_append = _inet6_opt_appendPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int inet6_opt_finish(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
  ) {
    return _inet6_opt_finish(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _inet6_opt_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, socklen_t, ffi.Int)>>('inet6_opt_finish');
  late final _inet6_opt_finish = _inet6_opt_finishPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int inet6_opt_set_val(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _inet6_opt_set_val(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _inet6_opt_set_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Void>, socklen_t)>>('inet6_opt_set_val');
  late final _inet6_opt_set_val = _inet6_opt_set_valPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  int inet6_opt_next(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<__uint8_t> arg3,
    ffi.Pointer<socklen_t> arg4,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg5,
  ) {
    return _inet6_opt_next(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _inet6_opt_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              socklen_t,
              ffi.Int,
              ffi.Pointer<__uint8_t>,
              ffi.Pointer<socklen_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('inet6_opt_next');
  late final _inet6_opt_next = _inet6_opt_nextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<__uint8_t>,
          ffi.Pointer<socklen_t>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int inet6_opt_find(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<socklen_t> arg4,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg5,
  ) {
    return _inet6_opt_find(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _inet6_opt_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              socklen_t,
              ffi.Int,
              __uint8_t,
              ffi.Pointer<socklen_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('inet6_opt_find');
  late final _inet6_opt_find = _inet6_opt_findPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<socklen_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int inet6_opt_get_val(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _inet6_opt_get_val(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _inet6_opt_get_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Void>, socklen_t)>>('inet6_opt_get_val');
  late final _inet6_opt_get_val = _inet6_opt_get_valPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  int inet6_rth_space(
    int arg0,
    int arg1,
  ) {
    return _inet6_rth_space(
      arg0,
      arg1,
    );
  }

  late final _inet6_rth_spacePtr =
      _lookup<ffi.NativeFunction<socklen_t Function(ffi.Int, ffi.Int)>>(
          'inet6_rth_space');
  late final _inet6_rth_space =
      _inet6_rth_spacePtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Void> inet6_rth_init(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _inet6_rth_init(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _inet6_rth_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, socklen_t,
              ffi.Int, ffi.Int)>>('inet6_rth_init');
  late final _inet6_rth_init = _inet6_rth_initPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  int inet6_rth_add(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<in6_addr> arg1,
  ) {
    return _inet6_rth_add(
      arg0,
      arg1,
    );
  }

  late final _inet6_rth_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<in6_addr>)>>('inet6_rth_add');
  late final _inet6_rth_add = _inet6_rth_addPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<in6_addr>)>();

  int inet6_rth_reverse(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _inet6_rth_reverse(
      arg0,
      arg1,
    );
  }

  late final _inet6_rth_reversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('inet6_rth_reverse');
  late final _inet6_rth_reverse = _inet6_rth_reversePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int inet6_rth_segments(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _inet6_rth_segments(
      arg0,
    );
  }

  late final _inet6_rth_segmentsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'inet6_rth_segments');
  late final _inet6_rth_segments =
      _inet6_rth_segmentsPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<in6_addr> inet6_rth_getaddr(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _inet6_rth_getaddr(
      arg0,
      arg1,
    );
  }

  late final _inet6_rth_getaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<in6_addr> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('inet6_rth_getaddr');
  late final _inet6_rth_getaddr = _inet6_rth_getaddrPtr
      .asFunction<ffi.Pointer<in6_addr> Function(ffi.Pointer<ffi.Void>, int)>();

  int bindresvport(
    int arg0,
    ffi.Pointer<sockaddr_in> arg1,
  ) {
    return _bindresvport(
      arg0,
      arg1,
    );
  }

  late final _bindresvportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr_in>)>>('bindresvport');
  late final _bindresvport = _bindresvportPtr
      .asFunction<int Function(int, ffi.Pointer<sockaddr_in>)>();

  int bindresvport_sa(
    int arg0,
    ffi.Pointer<sockaddr> arg1,
  ) {
    return _bindresvport_sa(
      arg0,
      arg1,
    );
  }

  late final _bindresvport_saPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>)>>(
      'bindresvport_sa');
  late final _bindresvport_sa = _bindresvport_saPtr
      .asFunction<int Function(int, ffi.Pointer<sockaddr>)>();

  late final ffi.Pointer<ffi.Int> _h_errno = _lookup<ffi.Int>('h_errno');

  int get h_errno => _h_errno.value;

  set h_errno(int value) => _h_errno.value = value;

  void endhostent() {
    return _endhostent();
  }

  late final _endhostentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endhostent');
  late final _endhostent = _endhostentPtr.asFunction<void Function()>();

  void endnetent() {
    return _endnetent();
  }

  late final _endnetentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endnetent');
  late final _endnetent = _endnetentPtr.asFunction<void Function()>();

  void endprotoent() {
    return _endprotoent();
  }

  late final _endprotoentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endprotoent');
  late final _endprotoent = _endprotoentPtr.asFunction<void Function()>();

  void endservent() {
    return _endservent();
  }

  late final _endserventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endservent');
  late final _endservent = _endserventPtr.asFunction<void Function()>();

  void freeaddrinfo(
    ffi.Pointer<addrinfo> arg0,
  ) {
    return _freeaddrinfo(
      arg0,
    );
  }

  late final _freeaddrinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<addrinfo>)>>(
          'freeaddrinfo');
  late final _freeaddrinfo =
      _freeaddrinfoPtr.asFunction<void Function(ffi.Pointer<addrinfo>)>();

  ffi.Pointer<ffi.Char> gai_strerror(
    int arg0,
  ) {
    return _gai_strerror(
      arg0,
    );
  }

  late final _gai_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'gai_strerror');
  late final _gai_strerror =
      _gai_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int getaddrinfo(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<addrinfo> arg2,
    ffi.Pointer<ffi.Pointer<addrinfo>> arg3,
  ) {
    return _getaddrinfo(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _getaddrinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<addrinfo>,
              ffi.Pointer<ffi.Pointer<addrinfo>>)>>('getaddrinfo');
  late final _getaddrinfo = _getaddrinfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<addrinfo>, ffi.Pointer<ffi.Pointer<addrinfo>>)>();

  ffi.Pointer<hostent> gethostbyaddr(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
  ) {
    return _gethostbyaddr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gethostbyaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hostent> Function(
              ffi.Pointer<ffi.Void>, socklen_t, ffi.Int)>>('gethostbyaddr');
  late final _gethostbyaddr = _gethostbyaddrPtr.asFunction<
      ffi.Pointer<hostent> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<hostent> gethostbyname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gethostbyname(
      arg0,
    );
  }

  late final _gethostbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hostent> Function(
              ffi.Pointer<ffi.Char>)>>('gethostbyname');
  late final _gethostbyname = _gethostbynamePtr
      .asFunction<ffi.Pointer<hostent> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<hostent> gethostent() {
    return _gethostent();
  }

  late final _gethostentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hostent> Function()>>(
          'gethostent');
  late final _gethostent =
      _gethostentPtr.asFunction<ffi.Pointer<hostent> Function()>();

  int getnameinfo(
    ffi.Pointer<sockaddr> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    int arg5,
    int arg6,
  ) {
    return _getnameinfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _getnameinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sockaddr>,
              socklen_t,
              ffi.Pointer<ffi.Char>,
              socklen_t,
              ffi.Pointer<ffi.Char>,
              socklen_t,
              ffi.Int)>>('getnameinfo');
  late final _getnameinfo = _getnameinfoPtr.asFunction<
      int Function(ffi.Pointer<sockaddr>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<netent> getnetbyaddr(
    int arg0,
    int arg1,
  ) {
    return _getnetbyaddr(
      arg0,
      arg1,
    );
  }

  late final _getnetbyaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<netent> Function(ffi.Uint32, ffi.Int)>>('getnetbyaddr');
  late final _getnetbyaddr =
      _getnetbyaddrPtr.asFunction<ffi.Pointer<netent> Function(int, int)>();

  ffi.Pointer<netent> getnetbyname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getnetbyname(
      arg0,
    );
  }

  late final _getnetbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<netent> Function(ffi.Pointer<ffi.Char>)>>('getnetbyname');
  late final _getnetbyname = _getnetbynamePtr
      .asFunction<ffi.Pointer<netent> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<netent> getnetent() {
    return _getnetent();
  }

  late final _getnetentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<netent> Function()>>('getnetent');
  late final _getnetent =
      _getnetentPtr.asFunction<ffi.Pointer<netent> Function()>();

  ffi.Pointer<protoent> getprotobyname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getprotobyname(
      arg0,
    );
  }

  late final _getprotobynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<protoent> Function(
              ffi.Pointer<ffi.Char>)>>('getprotobyname');
  late final _getprotobyname = _getprotobynamePtr
      .asFunction<ffi.Pointer<protoent> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<protoent> getprotobynumber(
    int arg0,
  ) {
    return _getprotobynumber(
      arg0,
    );
  }

  late final _getprotobynumberPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<protoent> Function(ffi.Int)>>(
          'getprotobynumber');
  late final _getprotobynumber =
      _getprotobynumberPtr.asFunction<ffi.Pointer<protoent> Function(int)>();

  ffi.Pointer<protoent> getprotoent() {
    return _getprotoent();
  }

  late final _getprotoentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<protoent> Function()>>(
          'getprotoent');
  late final _getprotoent =
      _getprotoentPtr.asFunction<ffi.Pointer<protoent> Function()>();

  ffi.Pointer<servent> getservbyname(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _getservbyname(
      arg0,
      arg1,
    );
  }

  late final _getservbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<servent> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('getservbyname');
  late final _getservbyname = _getservbynamePtr.asFunction<
      ffi.Pointer<servent> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<servent> getservbyport(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _getservbyport(
      arg0,
      arg1,
    );
  }

  late final _getservbyportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<servent> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('getservbyport');
  late final _getservbyport = _getservbyportPtr
      .asFunction<ffi.Pointer<servent> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<servent> getservent() {
    return _getservent();
  }

  late final _getserventPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<servent> Function()>>(
          'getservent');
  late final _getservent =
      _getserventPtr.asFunction<ffi.Pointer<servent> Function()>();

  void sethostent(
    int arg0,
  ) {
    return _sethostent(
      arg0,
    );
  }

  late final _sethostentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('sethostent');
  late final _sethostent = _sethostentPtr.asFunction<void Function(int)>();

  void setnetent(
    int arg0,
  ) {
    return _setnetent(
      arg0,
    );
  }

  late final _setnetentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('setnetent');
  late final _setnetent = _setnetentPtr.asFunction<void Function(int)>();

  void setprotoent(
    int arg0,
  ) {
    return _setprotoent(
      arg0,
    );
  }

  late final _setprotoentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('setprotoent');
  late final _setprotoent = _setprotoentPtr.asFunction<void Function(int)>();

  void setservent(
    int arg0,
  ) {
    return _setservent(
      arg0,
    );
  }

  late final _setserventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('setservent');
  late final _setservent = _setserventPtr.asFunction<void Function(int)>();

  void freehostent(
    ffi.Pointer<hostent> arg0,
  ) {
    return _freehostent(
      arg0,
    );
  }

  late final _freehostentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hostent>)>>(
          'freehostent');
  late final _freehostent =
      _freehostentPtr.asFunction<void Function(ffi.Pointer<hostent>)>();

  ffi.Pointer<hostent> gethostbyname2(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _gethostbyname2(
      arg0,
      arg1,
    );
  }

  late final _gethostbyname2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hostent> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('gethostbyname2');
  late final _gethostbyname2 = _gethostbyname2Ptr
      .asFunction<ffi.Pointer<hostent> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<hostent> getipnodebyaddr(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _getipnodebyaddr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _getipnodebyaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hostent> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('getipnodebyaddr');
  late final _getipnodebyaddr = _getipnodebyaddrPtr.asFunction<
      ffi.Pointer<hostent> Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<hostent> getipnodebyname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _getipnodebyname(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _getipnodebynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hostent> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('getipnodebyname');
  late final _getipnodebyname = _getipnodebynamePtr.asFunction<
      ffi.Pointer<hostent> Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<rpcent> getrpcbyname(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _getrpcbyname(
      name,
    );
  }

  late final _getrpcbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<rpcent> Function(ffi.Pointer<ffi.Char>)>>('getrpcbyname');
  late final _getrpcbyname = _getrpcbynamePtr
      .asFunction<ffi.Pointer<rpcent> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<rpcent> getrpcbynumber(
    int number,
  ) {
    return _getrpcbynumber(
      number,
    );
  }

  late final _getrpcbynumberPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<rpcent> Function(ffi.Int)>>(
          'getrpcbynumber');
  late final _getrpcbynumber =
      _getrpcbynumberPtr.asFunction<ffi.Pointer<rpcent> Function(int)>();

  ffi.Pointer<rpcent> getrpcent() {
    return _getrpcent();
  }

  late final _getrpcentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<rpcent> Function()>>('getrpcent');
  late final _getrpcent =
      _getrpcentPtr.asFunction<ffi.Pointer<rpcent> Function()>();

  void setrpcent(
    int stayopen,
  ) {
    return _setrpcent(
      stayopen,
    );
  }

  late final _setrpcentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('setrpcent');
  late final _setrpcent = _setrpcentPtr.asFunction<void Function(int)>();

  void endrpcent() {
    return _endrpcent();
  }

  late final _endrpcentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endrpcent');
  late final _endrpcent = _endrpcentPtr.asFunction<void Function()>();

  void herror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _herror(
      arg0,
    );
  }

  late final _herrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'herror');
  late final _herror =
      _herrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> hstrerror(
    int arg0,
  ) {
    return _hstrerror(
      arg0,
    );
  }

  late final _hstrerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'hstrerror');
  late final _hstrerror =
      _hstrerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int innetgr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _innetgr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _innetgrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('innetgr');
  late final _innetgr = _innetgrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int getnetgrent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getnetgrent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getnetgrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getnetgrent');
  late final _getnetgrent = _getnetgrentPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void endnetgrent() {
    return _endnetgrent();
  }

  late final _endnetgrentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endnetgrent');
  late final _endnetgrent = _endnetgrentPtr.asFunction<void Function()>();

  void setnetgrent(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setnetgrent(
      arg0,
    );
  }

  late final _setnetgrentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setnetgrent');
  late final _setnetgrent =
      _setnetgrentPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int inet_addr(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _inet_addr(
      arg0,
    );
  }

  late final _inet_addrPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(ffi.Pointer<ffi.Char>)>>(
          'inet_addr');
  late final _inet_addr =
      _inet_addrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> inet_ntoa(
    in_addr arg0,
  ) {
    return _inet_ntoa(
      arg0,
    );
  }

  late final _inet_ntoaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(in_addr)>>(
          'inet_ntoa');
  late final _inet_ntoa =
      _inet_ntoaPtr.asFunction<ffi.Pointer<ffi.Char> Function(in_addr)>();

  ffi.Pointer<ffi.Char> inet_ntop(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _inet_ntop(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _inet_ntopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, socklen_t)>>('inet_ntop');
  late final _inet_ntop = _inet_ntopPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  int inet_pton(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _inet_pton(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _inet_ptonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('inet_pton');
  late final _inet_pton = _inet_ptonPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int ascii2addr(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _ascii2addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ascii2addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('ascii2addr');
  late final _ascii2addr = _ascii2addrPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> addr2ascii(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _addr2ascii(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _addr2asciiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('addr2ascii');
  late final _addr2ascii = _addr2asciiPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  int inet_aton(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<in_addr> arg1,
  ) {
    return _inet_aton(
      arg0,
      arg1,
    );
  }

  late final _inet_atonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<in_addr>)>>('inet_aton');
  late final _inet_aton = _inet_atonPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<in_addr>)>();

  int inet_lnaof(
    in_addr arg0,
  ) {
    return _inet_lnaof(
      arg0,
    );
  }

  late final _inet_lnaofPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(in_addr)>>('inet_lnaof');
  late final _inet_lnaof = _inet_lnaofPtr.asFunction<int Function(in_addr)>();

  in_addr inet_makeaddr(
    int arg0,
    int arg1,
  ) {
    return _inet_makeaddr(
      arg0,
      arg1,
    );
  }

  late final _inet_makeaddrPtr =
      _lookup<ffi.NativeFunction<in_addr Function(in_addr_t, in_addr_t)>>(
          'inet_makeaddr');
  late final _inet_makeaddr =
      _inet_makeaddrPtr.asFunction<in_addr Function(int, int)>();

  int inet_netof(
    in_addr arg0,
  ) {
    return _inet_netof(
      arg0,
    );
  }

  late final _inet_netofPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(in_addr)>>('inet_netof');
  late final _inet_netof = _inet_netofPtr.asFunction<int Function(in_addr)>();

  int inet_network(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _inet_network(
      arg0,
    );
  }

  late final _inet_networkPtr =
      _lookup<ffi.NativeFunction<in_addr_t Function(ffi.Pointer<ffi.Char>)>>(
          'inet_network');
  late final _inet_network =
      _inet_networkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> inet_net_ntop(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _inet_net_ntop(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _inet_net_ntopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              __darwin_size_t)>>('inet_net_ntop');
  late final _inet_net_ntop = _inet_net_ntopPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  int inet_net_pton(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _inet_net_pton(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _inet_net_ptonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, __darwin_size_t)>>('inet_net_pton');
  late final _inet_net_pton = _inet_net_ptonPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> inet_neta(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _inet_neta(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _inet_netaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              in_addr_t, ffi.Pointer<ffi.Char>, __darwin_size_t)>>('inet_neta');
  late final _inet_neta = _inet_netaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int inet_nsap_addr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
    int arg2,
  ) {
    return _inet_nsap_addr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _inet_nsap_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('inet_nsap_addr');
  late final _inet_nsap_addr = _inet_nsap_addrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.Char> inet_nsap_ntoa(
    int arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _inet_nsap_ntoa(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _inet_nsap_ntoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Char>)>>('inet_nsap_ntoa');
  late final _inet_nsap_ntoa = _inet_nsap_ntoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Char>)>();

  int bpf_filter(
    ffi.Pointer<bpf_insn> arg0,
    ffi.Pointer<u_char> arg1,
    int arg2,
    int arg3,
  ) {
    return _bpf_filter(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _bpf_filterPtr = _lookup<
      ffi.NativeFunction<
          u_int Function(ffi.Pointer<bpf_insn>, ffi.Pointer<u_char>, u_int,
              u_int)>>('bpf_filter');
  late final _bpf_filter = _bpf_filterPtr.asFunction<
      int Function(ffi.Pointer<bpf_insn>, ffi.Pointer<u_char>, int, int)>();

  int bpf_validate(
    ffi.Pointer<bpf_insn> f,
    int len,
  ) {
    return _bpf_validate(
      f,
      len,
    );
  }

  late final _bpf_validatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<bpf_insn>, ffi.Int)>>(
      'bpf_validate');
  late final _bpf_validate =
      _bpf_validatePtr.asFunction<int Function(ffi.Pointer<bpf_insn>, int)>();

  ffi.Pointer<ffi.Char> bpf_image(
    ffi.Pointer<bpf_insn> arg0,
    int arg1,
  ) {
    return _bpf_image(
      arg0,
      arg1,
    );
  }

  late final _bpf_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<bpf_insn>, ffi.Int)>>('bpf_image');
  late final _bpf_image = _bpf_imagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<bpf_insn>, int)>();

  void bpf_dump(
    ffi.Pointer<bpf_program> arg0,
    int arg1,
  ) {
    return _bpf_dump(
      arg0,
      arg1,
    );
  }

  late final _bpf_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<bpf_program>, ffi.Int)>>('bpf_dump');
  late final _bpf_dump =
      _bpf_dumpPtr.asFunction<void Function(ffi.Pointer<bpf_program>, int)>();

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>();

  int pcap_init(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _pcap_init(
      arg0,
      arg1,
    );
  }

  late final _pcap_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('pcap_init');
  late final _pcap_init =
      _pcap_initPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> pcap_lookupdev(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _pcap_lookupdev(
      arg0,
    );
  }

  late final _pcap_lookupdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Char>)>>('pcap_lookupdev');
  late final _pcap_lookupdev = _pcap_lookupdevPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>)>();

  int pcap_lookupnet(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<bpf_u_int32> arg1,
    ffi.Pointer<bpf_u_int32> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _pcap_lookupnet(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _pcap_lookupnetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<bpf_u_int32>,
              ffi.Pointer<bpf_u_int32>,
              ffi.Pointer<ffi.Char>)>>('pcap_lookupnet');
  late final _pcap_lookupnet = _pcap_lookupnetPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<bpf_u_int32>,
          ffi.Pointer<bpf_u_int32>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pcap_t> pcap_create(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _pcap_create(
      arg0,
      arg1,
    );
  }

  late final _pcap_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcap_t> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('pcap_create');
  late final _pcap_create = _pcap_createPtr.asFunction<
      ffi.Pointer<pcap_t> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int pcap_set_snaplen(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
  ) {
    return _pcap_set_snaplen(
      arg0,
      arg1,
    );
  }

  late final _pcap_set_snaplenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int)>>(
      'pcap_set_snaplen');
  late final _pcap_set_snaplen =
      _pcap_set_snaplenPtr.asFunction<int Function(ffi.Pointer<pcap_t>, int)>();

  int pcap_set_promisc(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
  ) {
    return _pcap_set_promisc(
      arg0,
      arg1,
    );
  }

  late final _pcap_set_promiscPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int)>>(
      'pcap_set_promisc');
  late final _pcap_set_promisc =
      _pcap_set_promiscPtr.asFunction<int Function(ffi.Pointer<pcap_t>, int)>();

  int pcap_can_set_rfmon(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_can_set_rfmon(
      arg0,
    );
  }

  late final _pcap_can_set_rfmonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_can_set_rfmon');
  late final _pcap_can_set_rfmon =
      _pcap_can_set_rfmonPtr.asFunction<int Function(ffi.Pointer<pcap_t>)>();

  int pcap_set_rfmon(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
  ) {
    return _pcap_set_rfmon(
      arg0,
      arg1,
    );
  }

  late final _pcap_set_rfmonPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int)>>(
      'pcap_set_rfmon');
  late final _pcap_set_rfmon =
      _pcap_set_rfmonPtr.asFunction<int Function(ffi.Pointer<pcap_t>, int)>();

  int pcap_set_timeout(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
  ) {
    return _pcap_set_timeout(
      arg0,
      arg1,
    );
  }

  late final _pcap_set_timeoutPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int)>>(
      'pcap_set_timeout');
  late final _pcap_set_timeout =
      _pcap_set_timeoutPtr.asFunction<int Function(ffi.Pointer<pcap_t>, int)>();

  int pcap_set_tstamp_type(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
  ) {
    return _pcap_set_tstamp_type(
      arg0,
      arg1,
    );
  }

  late final _pcap_set_tstamp_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int)>>(
      'pcap_set_tstamp_type');
  late final _pcap_set_tstamp_type = _pcap_set_tstamp_typePtr
      .asFunction<int Function(ffi.Pointer<pcap_t>, int)>();

  int pcap_set_immediate_mode(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
  ) {
    return _pcap_set_immediate_mode(
      arg0,
      arg1,
    );
  }

  late final _pcap_set_immediate_modePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int)>>(
      'pcap_set_immediate_mode');
  late final _pcap_set_immediate_mode = _pcap_set_immediate_modePtr
      .asFunction<int Function(ffi.Pointer<pcap_t>, int)>();

  int pcap_set_buffer_size(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
  ) {
    return _pcap_set_buffer_size(
      arg0,
      arg1,
    );
  }

  late final _pcap_set_buffer_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int)>>(
      'pcap_set_buffer_size');
  late final _pcap_set_buffer_size = _pcap_set_buffer_sizePtr
      .asFunction<int Function(ffi.Pointer<pcap_t>, int)>();

  int pcap_set_tstamp_precision(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
  ) {
    return _pcap_set_tstamp_precision(
      arg0,
      arg1,
    );
  }

  late final _pcap_set_tstamp_precisionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int)>>(
      'pcap_set_tstamp_precision');
  late final _pcap_set_tstamp_precision = _pcap_set_tstamp_precisionPtr
      .asFunction<int Function(ffi.Pointer<pcap_t>, int)>();

  int pcap_get_tstamp_precision(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_get_tstamp_precision(
      arg0,
    );
  }

  late final _pcap_get_tstamp_precisionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_get_tstamp_precision');
  late final _pcap_get_tstamp_precision = _pcap_get_tstamp_precisionPtr
      .asFunction<int Function(ffi.Pointer<pcap_t>)>();

  int pcap_activate(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_activate(
      arg0,
    );
  }

  late final _pcap_activatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_activate');
  late final _pcap_activate =
      _pcap_activatePtr.asFunction<int Function(ffi.Pointer<pcap_t>)>();

  int pcap_list_tstamp_types(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int>> arg1,
  ) {
    return _pcap_list_tstamp_types(
      arg0,
      arg1,
    );
  }

  late final _pcap_list_tstamp_typesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pcap_t>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>)>>('pcap_list_tstamp_types');
  late final _pcap_list_tstamp_types = _pcap_list_tstamp_typesPtr.asFunction<
      int Function(ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Pointer<ffi.Int>>)>();

  void pcap_free_tstamp_types(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _pcap_free_tstamp_types(
      arg0,
    );
  }

  late final _pcap_free_tstamp_typesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'pcap_free_tstamp_types');
  late final _pcap_free_tstamp_types = _pcap_free_tstamp_typesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  int pcap_tstamp_type_name_to_val(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _pcap_tstamp_type_name_to_val(
      arg0,
    );
  }

  late final _pcap_tstamp_type_name_to_valPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pcap_tstamp_type_name_to_val');
  late final _pcap_tstamp_type_name_to_val = _pcap_tstamp_type_name_to_valPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pcap_tstamp_type_val_to_name(
    int arg0,
  ) {
    return _pcap_tstamp_type_val_to_name(
      arg0,
    );
  }

  late final _pcap_tstamp_type_val_to_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pcap_tstamp_type_val_to_name');
  late final _pcap_tstamp_type_val_to_name = _pcap_tstamp_type_val_to_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> pcap_tstamp_type_val_to_description(
    int arg0,
  ) {
    return _pcap_tstamp_type_val_to_description(
      arg0,
    );
  }

  late final _pcap_tstamp_type_val_to_descriptionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pcap_tstamp_type_val_to_description');
  late final _pcap_tstamp_type_val_to_description =
      _pcap_tstamp_type_val_to_descriptionPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<pcap_t> pcap_open_live(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _pcap_open_live(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _pcap_open_livePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcap_t> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('pcap_open_live');
  late final _pcap_open_live = _pcap_open_livePtr.asFunction<
      ffi.Pointer<pcap_t> Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pcap_t> pcap_open_dead(
    int arg0,
    int arg1,
  ) {
    return _pcap_open_dead(
      arg0,
      arg1,
    );
  }

  late final _pcap_open_deadPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<pcap_t> Function(ffi.Int, ffi.Int)>>(
      'pcap_open_dead');
  late final _pcap_open_dead =
      _pcap_open_deadPtr.asFunction<ffi.Pointer<pcap_t> Function(int, int)>();

  ffi.Pointer<pcap_t> pcap_open_dead_with_tstamp_precision(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _pcap_open_dead_with_tstamp_precision(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pcap_open_dead_with_tstamp_precisionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcap_t> Function(ffi.Int, ffi.Int,
              u_int)>>('pcap_open_dead_with_tstamp_precision');
  late final _pcap_open_dead_with_tstamp_precision =
      _pcap_open_dead_with_tstamp_precisionPtr
          .asFunction<ffi.Pointer<pcap_t> Function(int, int, int)>();

  ffi.Pointer<pcap_t> pcap_open_offline_with_tstamp_precision(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _pcap_open_offline_with_tstamp_precision(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pcap_open_offline_with_tstamp_precisionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pcap_t> Function(
                  ffi.Pointer<ffi.Char>, u_int, ffi.Pointer<ffi.Char>)>>(
      'pcap_open_offline_with_tstamp_precision');
  late final _pcap_open_offline_with_tstamp_precision =
      _pcap_open_offline_with_tstamp_precisionPtr.asFunction<
          ffi.Pointer<pcap_t> Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pcap_t> pcap_open_offline(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _pcap_open_offline(
      arg0,
      arg1,
    );
  }

  late final _pcap_open_offlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcap_t> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pcap_open_offline');
  late final _pcap_open_offline = _pcap_open_offlinePtr.asFunction<
      ffi.Pointer<pcap_t> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pcap_t> pcap_fopen_offline_with_tstamp_precision(
    ffi.Pointer<FILE> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _pcap_fopen_offline_with_tstamp_precision(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pcap_fopen_offline_with_tstamp_precisionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pcap_t> Function(
                  ffi.Pointer<FILE>, u_int, ffi.Pointer<ffi.Char>)>>(
      'pcap_fopen_offline_with_tstamp_precision');
  late final _pcap_fopen_offline_with_tstamp_precision =
      _pcap_fopen_offline_with_tstamp_precisionPtr.asFunction<
          ffi.Pointer<pcap_t> Function(
              ffi.Pointer<FILE>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pcap_t> pcap_fopen_offline(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _pcap_fopen_offline(
      arg0,
      arg1,
    );
  }

  late final _pcap_fopen_offlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcap_t> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('pcap_fopen_offline');
  late final _pcap_fopen_offline = _pcap_fopen_offlinePtr.asFunction<
      ffi.Pointer<pcap_t> Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  void pcap_close(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_close(
      arg0,
    );
  }

  late final _pcap_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pcap_t>)>>(
          'pcap_close');
  late final _pcap_close =
      _pcap_closePtr.asFunction<void Function(ffi.Pointer<pcap_t>)>();

  int pcap_loop(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
    pcap_handler arg2,
    ffi.Pointer<u_char> arg3,
  ) {
    return _pcap_loop(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _pcap_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int, pcap_handler,
              ffi.Pointer<u_char>)>>('pcap_loop');
  late final _pcap_loop = _pcap_loopPtr.asFunction<
      int Function(
          ffi.Pointer<pcap_t>, int, pcap_handler, ffi.Pointer<u_char>)>();

  int pcap_dispatch(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
    pcap_handler arg2,
    ffi.Pointer<u_char> arg3,
  ) {
    return _pcap_dispatch(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _pcap_dispatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int, pcap_handler,
              ffi.Pointer<u_char>)>>('pcap_dispatch');
  late final _pcap_dispatch = _pcap_dispatchPtr.asFunction<
      int Function(
          ffi.Pointer<pcap_t>, int, pcap_handler, ffi.Pointer<u_char>)>();

  ffi.Pointer<u_char> pcap_next(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<pcap_pkthdr> arg1,
  ) {
    return _pcap_next(
      arg0,
      arg1,
    );
  }

  late final _pcap_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<u_char> Function(
              ffi.Pointer<pcap_t>, ffi.Pointer<pcap_pkthdr>)>>('pcap_next');
  late final _pcap_next = _pcap_nextPtr.asFunction<
      ffi.Pointer<u_char> Function(
          ffi.Pointer<pcap_t>, ffi.Pointer<pcap_pkthdr>)>();

  int pcap_next_ex(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<ffi.Pointer<pcap_pkthdr>> arg1,
    ffi.Pointer<ffi.Pointer<u_char>> arg2,
  ) {
    return _pcap_next_ex(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pcap_next_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pcap_t>,
              ffi.Pointer<ffi.Pointer<pcap_pkthdr>>,
              ffi.Pointer<ffi.Pointer<u_char>>)>>('pcap_next_ex');
  late final _pcap_next_ex = _pcap_next_exPtr.asFunction<
      int Function(ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Pointer<pcap_pkthdr>>,
          ffi.Pointer<ffi.Pointer<u_char>>)>();

  void pcap_breakloop(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_breakloop(
      arg0,
    );
  }

  late final _pcap_breakloopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pcap_t>)>>(
          'pcap_breakloop');
  late final _pcap_breakloop =
      _pcap_breakloopPtr.asFunction<void Function(ffi.Pointer<pcap_t>)>();

  int pcap_stats(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<pcap_stat> arg1,
  ) {
    return _pcap_stats(
      arg0,
      arg1,
    );
  }

  late final _pcap_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pcap_t>, ffi.Pointer<pcap_stat>)>>('pcap_stats');
  late final _pcap_stats = _pcap_statsPtr
      .asFunction<int Function(ffi.Pointer<pcap_t>, ffi.Pointer<pcap_stat>)>();

  int pcap_setfilter(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<bpf_program> arg1,
  ) {
    return _pcap_setfilter(
      arg0,
      arg1,
    );
  }

  late final _pcap_setfilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pcap_t>,
              ffi.Pointer<bpf_program>)>>('pcap_setfilter');
  late final _pcap_setfilter = _pcap_setfilterPtr.asFunction<
      int Function(ffi.Pointer<pcap_t>, ffi.Pointer<bpf_program>)>();

  int pcap_setdirection(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
  ) {
    return _pcap_setdirection(
      arg0,
      arg1,
    );
  }

  late final _pcap_setdirectionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int32)>>(
      'pcap_setdirection');
  late final _pcap_setdirection = _pcap_setdirectionPtr
      .asFunction<int Function(ffi.Pointer<pcap_t>, int)>();

  int pcap_getnonblock(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _pcap_getnonblock(
      arg0,
      arg1,
    );
  }

  late final _pcap_getnonblockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Char>)>>('pcap_getnonblock');
  late final _pcap_getnonblock = _pcap_getnonblockPtr
      .asFunction<int Function(ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Char>)>();

  int pcap_setnonblock(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _pcap_setnonblock(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pcap_setnonblockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('pcap_setnonblock');
  late final _pcap_setnonblock = _pcap_setnonblockPtr.asFunction<
      int Function(ffi.Pointer<pcap_t>, int, ffi.Pointer<ffi.Char>)>();

  int pcap_inject(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _pcap_inject(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pcap_injectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('pcap_inject');
  late final _pcap_inject = _pcap_injectPtr.asFunction<
      int Function(ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Void>, int)>();

  int pcap_sendpacket(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<u_char> arg1,
    int arg2,
  ) {
    return _pcap_sendpacket(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pcap_sendpacketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Pointer<u_char>,
              ffi.Int)>>('pcap_sendpacket');
  late final _pcap_sendpacket = _pcap_sendpacketPtr.asFunction<
      int Function(ffi.Pointer<pcap_t>, ffi.Pointer<u_char>, int)>();

  ffi.Pointer<ffi.Char> pcap_statustostr(
    int arg0,
  ) {
    return _pcap_statustostr(
      arg0,
    );
  }

  late final _pcap_statustostrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pcap_statustostr');
  late final _pcap_statustostr =
      _pcap_statustostrPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> pcap_strerror(
    int arg0,
  ) {
    return _pcap_strerror(
      arg0,
    );
  }

  late final _pcap_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pcap_strerror');
  late final _pcap_strerror =
      _pcap_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> pcap_geterr(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_geterr(
      arg0,
    );
  }

  late final _pcap_geterrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pcap_t>)>>('pcap_geterr');
  late final _pcap_geterr = _pcap_geterrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pcap_t>)>();

  void pcap_perror(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _pcap_perror(
      arg0,
      arg1,
    );
  }

  late final _pcap_perrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Char>)>>('pcap_perror');
  late final _pcap_perror = _pcap_perrorPtr
      .asFunction<void Function(ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Char>)>();

  int pcap_compile(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<bpf_program> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    int arg4,
  ) {
    return _pcap_compile(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _pcap_compilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Pointer<bpf_program>,
              ffi.Pointer<ffi.Char>, ffi.Int, bpf_u_int32)>>('pcap_compile');
  late final _pcap_compile = _pcap_compilePtr.asFunction<
      int Function(ffi.Pointer<pcap_t>, ffi.Pointer<bpf_program>,
          ffi.Pointer<ffi.Char>, int, int)>();

  int pcap_compile_nopcap(
    int arg0,
    int arg1,
    ffi.Pointer<bpf_program> arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
    int arg5,
  ) {
    return _pcap_compile_nopcap(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _pcap_compile_nopcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<bpf_program>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              bpf_u_int32)>>('pcap_compile_nopcap');
  late final _pcap_compile_nopcap = _pcap_compile_nopcapPtr.asFunction<
      int Function(int, int, ffi.Pointer<bpf_program>, ffi.Pointer<ffi.Char>,
          int, int)>();

  void pcap_freecode(
    ffi.Pointer<bpf_program> arg0,
  ) {
    return _pcap_freecode(
      arg0,
    );
  }

  late final _pcap_freecodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<bpf_program>)>>(
          'pcap_freecode');
  late final _pcap_freecode =
      _pcap_freecodePtr.asFunction<void Function(ffi.Pointer<bpf_program>)>();

  int pcap_offline_filter(
    ffi.Pointer<bpf_program> arg0,
    ffi.Pointer<pcap_pkthdr> arg1,
    ffi.Pointer<u_char> arg2,
  ) {
    return _pcap_offline_filter(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pcap_offline_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<bpf_program>, ffi.Pointer<pcap_pkthdr>,
              ffi.Pointer<u_char>)>>('pcap_offline_filter');
  late final _pcap_offline_filter = _pcap_offline_filterPtr.asFunction<
      int Function(ffi.Pointer<bpf_program>, ffi.Pointer<pcap_pkthdr>,
          ffi.Pointer<u_char>)>();

  int pcap_datalink(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_datalink(
      arg0,
    );
  }

  late final _pcap_datalinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_datalink');
  late final _pcap_datalink =
      _pcap_datalinkPtr.asFunction<int Function(ffi.Pointer<pcap_t>)>();

  int pcap_datalink_ext(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_datalink_ext(
      arg0,
    );
  }

  late final _pcap_datalink_extPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_datalink_ext');
  late final _pcap_datalink_ext =
      _pcap_datalink_extPtr.asFunction<int Function(ffi.Pointer<pcap_t>)>();

  int pcap_list_datalinks(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int>> arg1,
  ) {
    return _pcap_list_datalinks(
      arg0,
      arg1,
    );
  }

  late final _pcap_list_datalinksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pcap_t>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>)>>('pcap_list_datalinks');
  late final _pcap_list_datalinks = _pcap_list_datalinksPtr.asFunction<
      int Function(ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Pointer<ffi.Int>>)>();

  int pcap_set_datalink(
    ffi.Pointer<pcap_t> arg0,
    int arg1,
  ) {
    return _pcap_set_datalink(
      arg0,
      arg1,
    );
  }

  late final _pcap_set_datalinkPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>, ffi.Int)>>(
      'pcap_set_datalink');
  late final _pcap_set_datalink = _pcap_set_datalinkPtr
      .asFunction<int Function(ffi.Pointer<pcap_t>, int)>();

  void pcap_free_datalinks(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _pcap_free_datalinks(
      arg0,
    );
  }

  late final _pcap_free_datalinksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'pcap_free_datalinks');
  late final _pcap_free_datalinks =
      _pcap_free_datalinksPtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  int pcap_datalink_name_to_val(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _pcap_datalink_name_to_val(
      arg0,
    );
  }

  late final _pcap_datalink_name_to_valPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pcap_datalink_name_to_val');
  late final _pcap_datalink_name_to_val = _pcap_datalink_name_to_valPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pcap_datalink_val_to_name(
    int arg0,
  ) {
    return _pcap_datalink_val_to_name(
      arg0,
    );
  }

  late final _pcap_datalink_val_to_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pcap_datalink_val_to_name');
  late final _pcap_datalink_val_to_name = _pcap_datalink_val_to_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> pcap_datalink_val_to_description(
    int arg0,
  ) {
    return _pcap_datalink_val_to_description(
      arg0,
    );
  }

  late final _pcap_datalink_val_to_descriptionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pcap_datalink_val_to_description');
  late final _pcap_datalink_val_to_description =
      _pcap_datalink_val_to_descriptionPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> pcap_datalink_val_to_description_or_dlt(
    int arg0,
  ) {
    return _pcap_datalink_val_to_description_or_dlt(
      arg0,
    );
  }

  late final _pcap_datalink_val_to_description_or_dltPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pcap_datalink_val_to_description_or_dlt');
  late final _pcap_datalink_val_to_description_or_dlt =
      _pcap_datalink_val_to_description_or_dltPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int pcap_snapshot(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_snapshot(
      arg0,
    );
  }

  late final _pcap_snapshotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_snapshot');
  late final _pcap_snapshot =
      _pcap_snapshotPtr.asFunction<int Function(ffi.Pointer<pcap_t>)>();

  int pcap_is_swapped(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_is_swapped(
      arg0,
    );
  }

  late final _pcap_is_swappedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_is_swapped');
  late final _pcap_is_swapped =
      _pcap_is_swappedPtr.asFunction<int Function(ffi.Pointer<pcap_t>)>();

  int pcap_major_version(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_major_version(
      arg0,
    );
  }

  late final _pcap_major_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_major_version');
  late final _pcap_major_version =
      _pcap_major_versionPtr.asFunction<int Function(ffi.Pointer<pcap_t>)>();

  int pcap_minor_version(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_minor_version(
      arg0,
    );
  }

  late final _pcap_minor_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_minor_version');
  late final _pcap_minor_version =
      _pcap_minor_versionPtr.asFunction<int Function(ffi.Pointer<pcap_t>)>();

  int pcap_bufsize(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_bufsize(
      arg0,
    );
  }

  late final _pcap_bufsizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_bufsize');
  late final _pcap_bufsize =
      _pcap_bufsizePtr.asFunction<int Function(ffi.Pointer<pcap_t>)>();

  ffi.Pointer<FILE> pcap_file(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_file(
      arg0,
    );
  }

  late final _pcap_filePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.Pointer<pcap_t>)>>(
      'pcap_file');
  late final _pcap_file = _pcap_filePtr
      .asFunction<ffi.Pointer<FILE> Function(ffi.Pointer<pcap_t>)>();

  int pcap_fileno(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_fileno(
      arg0,
    );
  }

  late final _pcap_filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_fileno');
  late final _pcap_fileno =
      _pcap_filenoPtr.asFunction<int Function(ffi.Pointer<pcap_t>)>();

  ffi.Pointer<pcap_dumper_t> pcap_dump_open(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _pcap_dump_open(
      arg0,
      arg1,
    );
  }

  late final _pcap_dump_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcap_dumper_t> Function(
              ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Char>)>>('pcap_dump_open');
  late final _pcap_dump_open = _pcap_dump_openPtr.asFunction<
      ffi.Pointer<pcap_dumper_t> Function(
          ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pcap_dumper_t> pcap_dump_fopen(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<FILE> fp,
  ) {
    return _pcap_dump_fopen(
      arg0,
      fp,
    );
  }

  late final _pcap_dump_fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcap_dumper_t> Function(
              ffi.Pointer<pcap_t>, ffi.Pointer<FILE>)>>('pcap_dump_fopen');
  late final _pcap_dump_fopen = _pcap_dump_fopenPtr.asFunction<
      ffi.Pointer<pcap_dumper_t> Function(
          ffi.Pointer<pcap_t>, ffi.Pointer<FILE>)>();

  ffi.Pointer<pcap_dumper_t> pcap_dump_open_append(
    ffi.Pointer<pcap_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _pcap_dump_open_append(
      arg0,
      arg1,
    );
  }

  late final _pcap_dump_open_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcap_dumper_t> Function(ffi.Pointer<pcap_t>,
              ffi.Pointer<ffi.Char>)>>('pcap_dump_open_append');
  late final _pcap_dump_open_append = _pcap_dump_open_appendPtr.asFunction<
      ffi.Pointer<pcap_dumper_t> Function(
          ffi.Pointer<pcap_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> pcap_dump_file(
    ffi.Pointer<pcap_dumper_t> arg0,
  ) {
    return _pcap_dump_file(
      arg0,
    );
  }

  late final _pcap_dump_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<pcap_dumper_t>)>>('pcap_dump_file');
  late final _pcap_dump_file = _pcap_dump_filePtr
      .asFunction<ffi.Pointer<FILE> Function(ffi.Pointer<pcap_dumper_t>)>();

  int pcap_dump_ftell(
    ffi.Pointer<pcap_dumper_t> arg0,
  ) {
    return _pcap_dump_ftell(
      arg0,
    );
  }

  late final _pcap_dump_ftellPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<pcap_dumper_t>)>>(
      'pcap_dump_ftell');
  late final _pcap_dump_ftell = _pcap_dump_ftellPtr
      .asFunction<int Function(ffi.Pointer<pcap_dumper_t>)>();

  int pcap_dump_ftell64(
    ffi.Pointer<pcap_dumper_t> arg0,
  ) {
    return _pcap_dump_ftell64(
      arg0,
    );
  }

  late final _pcap_dump_ftell64Ptr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<pcap_dumper_t>)>>(
      'pcap_dump_ftell64');
  late final _pcap_dump_ftell64 = _pcap_dump_ftell64Ptr
      .asFunction<int Function(ffi.Pointer<pcap_dumper_t>)>();

  int pcap_dump_flush(
    ffi.Pointer<pcap_dumper_t> arg0,
  ) {
    return _pcap_dump_flush(
      arg0,
    );
  }

  late final _pcap_dump_flushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_dumper_t>)>>(
          'pcap_dump_flush');
  late final _pcap_dump_flush = _pcap_dump_flushPtr
      .asFunction<int Function(ffi.Pointer<pcap_dumper_t>)>();

  void pcap_dump_close(
    ffi.Pointer<pcap_dumper_t> arg0,
  ) {
    return _pcap_dump_close(
      arg0,
    );
  }

  late final _pcap_dump_closePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pcap_dumper_t>)>>(
      'pcap_dump_close');
  late final _pcap_dump_close = _pcap_dump_closePtr
      .asFunction<void Function(ffi.Pointer<pcap_dumper_t>)>();

  void pcap_dump(
    ffi.Pointer<u_char> arg0,
    ffi.Pointer<pcap_pkthdr> arg1,
    ffi.Pointer<u_char> arg2,
  ) {
    return _pcap_dump(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pcap_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<u_char>, ffi.Pointer<pcap_pkthdr>,
              ffi.Pointer<u_char>)>>('pcap_dump');
  late final pcap_dumpPtr = _pcap_dumpPtr;
  late final _pcap_dump = _pcap_dumpPtr.asFunction<
      void Function(ffi.Pointer<u_char>, ffi.Pointer<pcap_pkthdr>,
          ffi.Pointer<u_char>)>();

  int pcap_findalldevs(
    ffi.Pointer<ffi.Pointer<pcap_if_t>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _pcap_findalldevs(
      arg0,
      arg1,
    );
  }

  late final _pcap_findalldevsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<pcap_if_t>>,
              ffi.Pointer<ffi.Char>)>>('pcap_findalldevs');
  late final _pcap_findalldevs = _pcap_findalldevsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<pcap_if_t>>, ffi.Pointer<ffi.Char>)>();

  void pcap_freealldevs(
    ffi.Pointer<pcap_if_t> arg0,
  ) {
    return _pcap_freealldevs(
      arg0,
    );
  }

  late final _pcap_freealldevsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pcap_if_t>)>>(
          'pcap_freealldevs');
  late final _pcap_freealldevs =
      _pcap_freealldevsPtr.asFunction<void Function(ffi.Pointer<pcap_if_t>)>();

  ffi.Pointer<ffi.Char> pcap_lib_version() {
    return _pcap_lib_version();
  }

  late final _pcap_lib_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'pcap_lib_version');
  late final _pcap_lib_version =
      _pcap_lib_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int pcap_get_selectable_fd(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_get_selectable_fd(
      arg0,
    );
  }

  late final _pcap_get_selectable_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pcap_t>)>>(
          'pcap_get_selectable_fd');
  late final _pcap_get_selectable_fd = _pcap_get_selectable_fdPtr
      .asFunction<int Function(ffi.Pointer<pcap_t>)>();

  ffi.Pointer<timeval> pcap_get_required_select_timeout(
    ffi.Pointer<pcap_t> arg0,
  ) {
    return _pcap_get_required_select_timeout(
      arg0,
    );
  }

  late final _pcap_get_required_select_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<timeval> Function(
              ffi.Pointer<pcap_t>)>>('pcap_get_required_select_timeout');
  late final _pcap_get_required_select_timeout =
      _pcap_get_required_select_timeoutPtr
          .asFunction<ffi.Pointer<timeval> Function(ffi.Pointer<pcap_t>)>();

  ffi.Pointer<pcap_t> pcap_open(
    ffi.Pointer<ffi.Char> source,
    int snaplen,
    int flags,
    int read_timeout,
    ffi.Pointer<pcap_rmtauth> auth,
    ffi.Pointer<ffi.Char> errbuf,
  ) {
    return _pcap_open(
      source,
      snaplen,
      flags,
      read_timeout,
      auth,
      errbuf,
    );
  }

  late final _pcap_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcap_t> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<pcap_rmtauth>,
              ffi.Pointer<ffi.Char>)>>('pcap_open');
  late final _pcap_open = _pcap_openPtr.asFunction<
      ffi.Pointer<pcap_t> Function(ffi.Pointer<ffi.Char>, int, int, int,
          ffi.Pointer<pcap_rmtauth>, ffi.Pointer<ffi.Char>)>();

  int pcap_createsrcstr(
    ffi.Pointer<ffi.Char> source,
    int type,
    ffi.Pointer<ffi.Char> host,
    ffi.Pointer<ffi.Char> port,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> errbuf,
  ) {
    return _pcap_createsrcstr(
      source,
      type,
      host,
      port,
      name,
      errbuf,
    );
  }

  late final _pcap_createsrcstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pcap_createsrcstr');
  late final _pcap_createsrcstr = _pcap_createsrcstrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int pcap_parsesrcstr(
    ffi.Pointer<ffi.Char> source,
    ffi.Pointer<ffi.Int> type,
    ffi.Pointer<ffi.Char> host,
    ffi.Pointer<ffi.Char> port,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> errbuf,
  ) {
    return _pcap_parsesrcstr(
      source,
      type,
      host,
      port,
      name,
      errbuf,
    );
  }

  late final _pcap_parsesrcstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pcap_parsesrcstr');
  late final _pcap_parsesrcstr = _pcap_parsesrcstrPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int pcap_findalldevs_ex(
    ffi.Pointer<ffi.Char> source,
    ffi.Pointer<pcap_rmtauth> auth,
    ffi.Pointer<ffi.Pointer<pcap_if_t>> alldevs,
    ffi.Pointer<ffi.Char> errbuf,
  ) {
    return _pcap_findalldevs_ex(
      source,
      auth,
      alldevs,
      errbuf,
    );
  }

  late final _pcap_findalldevs_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pcap_rmtauth>,
              ffi.Pointer<ffi.Pointer<pcap_if_t>>,
              ffi.Pointer<ffi.Char>)>>('pcap_findalldevs_ex');
  late final _pcap_findalldevs_ex = _pcap_findalldevs_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<pcap_rmtauth>,
          ffi.Pointer<ffi.Pointer<pcap_if_t>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pcap_samp> pcap_setsampling(
    ffi.Pointer<pcap_t> p,
  ) {
    return _pcap_setsampling(
      p,
    );
  }

  late final _pcap_setsamplingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcap_samp> Function(
              ffi.Pointer<pcap_t>)>>('pcap_setsampling');
  late final _pcap_setsampling = _pcap_setsamplingPtr
      .asFunction<ffi.Pointer<pcap_samp> Function(ffi.Pointer<pcap_t>)>();

  int pcap_remoteact_accept(
    ffi.Pointer<ffi.Char> address,
    ffi.Pointer<ffi.Char> port,
    ffi.Pointer<ffi.Char> hostlist,
    ffi.Pointer<ffi.Char> connectinghost,
    ffi.Pointer<pcap_rmtauth> auth,
    ffi.Pointer<ffi.Char> errbuf,
  ) {
    return _pcap_remoteact_accept(
      address,
      port,
      hostlist,
      connectinghost,
      auth,
      errbuf,
    );
  }

  late final _pcap_remoteact_acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pcap_rmtauth>,
              ffi.Pointer<ffi.Char>)>>('pcap_remoteact_accept');
  late final _pcap_remoteact_accept = _pcap_remoteact_acceptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<pcap_rmtauth>,
          ffi.Pointer<ffi.Char>)>();

  int pcap_remoteact_accept_ex(
    ffi.Pointer<ffi.Char> address,
    ffi.Pointer<ffi.Char> port,
    ffi.Pointer<ffi.Char> hostlist,
    ffi.Pointer<ffi.Char> connectinghost,
    ffi.Pointer<pcap_rmtauth> auth,
    int uses_ssl,
    ffi.Pointer<ffi.Char> errbuf,
  ) {
    return _pcap_remoteact_accept_ex(
      address,
      port,
      hostlist,
      connectinghost,
      auth,
      uses_ssl,
      errbuf,
    );
  }

  late final _pcap_remoteact_accept_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pcap_rmtauth>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('pcap_remoteact_accept_ex');
  late final _pcap_remoteact_accept_ex =
      _pcap_remoteact_accept_exPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pcap_rmtauth>,
              int,
              ffi.Pointer<ffi.Char>)>();

  int pcap_remoteact_list(
    ffi.Pointer<ffi.Char> hostlist,
    int sep,
    int size,
    ffi.Pointer<ffi.Char> errbuf,
  ) {
    return _pcap_remoteact_list(
      hostlist,
      sep,
      size,
      errbuf,
    );
  }

  late final _pcap_remoteact_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Char, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('pcap_remoteact_list');
  late final _pcap_remoteact_list = _pcap_remoteact_listPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int pcap_remoteact_close(
    ffi.Pointer<ffi.Char> host,
    ffi.Pointer<ffi.Char> errbuf,
  ) {
    return _pcap_remoteact_close(
      host,
      errbuf,
    );
  }

  late final _pcap_remoteact_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pcap_remoteact_close');
  late final _pcap_remoteact_close = _pcap_remoteact_closePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void pcap_remoteact_cleanup() {
    return _pcap_remoteact_cleanup();
  }

  late final _pcap_remoteact_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'pcap_remoteact_cleanup');
  late final _pcap_remoteact_cleanup =
      _pcap_remoteact_cleanupPtr.asFunction<void Function()>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

typedef intmax_t = ffi.Long;

class imaxdiv_t extends ffi.Struct {
  @intmax_t()
  external int quot;

  @intmax_t()
  external int rem;
}

typedef uintmax_t = ffi.UnsignedLong;

@ffi.Packed(1)
class _OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
class _OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
class _OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

typedef __int32_t = ffi.Int;

class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

typedef __darwin_time_t = ffi.Long;

class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_suseconds_t = __int32_t;

class timeval64 extends ffi.Struct {
  @__int64_t()
  external int tv_sec;

  @__int64_t()
  external int tv_usec;
}

typedef __int64_t = ffi.LongLong;

class itimerval extends ffi.Struct {
  external timeval it_interval;

  external timeval it_value;
}

class timezone extends ffi.Struct {
  @ffi.Int()
  external int tz_minuteswest;

  @ffi.Int()
  external int tz_dsttime;
}

class clockinfo extends ffi.Struct {
  @ffi.Int()
  external int hz;

  @ffi.Int()
  external int tick;

  @ffi.Int()
  external int tickadj;

  @ffi.Int()
  external int stathz;

  @ffi.Int()
  external int profhz;
}

class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

typedef clock_t = __darwin_clock_t;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef time_t = __darwin_time_t;

abstract class clockid_t {
  static const int _CLOCK_REALTIME = 0;
  static const int _CLOCK_MONOTONIC = 6;
  static const int _CLOCK_MONOTONIC_RAW = 4;
  static const int _CLOCK_MONOTONIC_RAW_APPROX = 5;
  static const int _CLOCK_UPTIME_RAW = 8;
  static const int _CLOCK_UPTIME_RAW_APPROX = 9;
  static const int _CLOCK_PROCESS_CPUTIME_ID = 12;
  static const int _CLOCK_THREAD_CPUTIME_ID = 16;
}

typedef __uint64_t = ffi.UnsignedLongLong;

class iovec extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_base;

  @ffi.Size()
  external int iov_len;
}

class sa_endpoints extends ffi.Struct {
  @ffi.UnsignedInt()
  external int sae_srcif;

  external ffi.Pointer<sockaddr> sae_srcaddr;

  @socklen_t()
  external int sae_srcaddrlen;

  external ffi.Pointer<sockaddr> sae_dstaddr;

  @socklen_t()
  external int sae_dstaddrlen;
}

class sockaddr extends ffi.Struct {
  @__uint8_t()
  external int sa_len;

  @sa_family_t()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> sa_data;
}

typedef __uint8_t = ffi.UnsignedChar;
typedef sa_family_t = __uint8_t;
typedef socklen_t = __darwin_socklen_t;
typedef __darwin_socklen_t = __uint32_t;
typedef __uint32_t = ffi.UnsignedInt;

class linger extends ffi.Struct {
  @ffi.Int()
  external int l_onoff;

  @ffi.Int()
  external int l_linger;
}

class so_np_extensions extends ffi.Struct {
  @u_int32_t()
  external int npx_flags;

  @u_int32_t()
  external int npx_mask;
}

typedef u_int32_t = ffi.UnsignedInt;

class __sockaddr_header extends ffi.Struct {
  @__uint8_t()
  external int sa_len;

  @sa_family_t()
  external int sa_family;
}

class sockproto extends ffi.Struct {
  @__uint16_t()
  external int sp_family;

  @__uint16_t()
  external int sp_protocol;
}

typedef __uint16_t = ffi.UnsignedShort;

class sockaddr_storage extends ffi.Struct {
  @__uint8_t()
  external int ss_len;

  @sa_family_t()
  external int ss_family;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Char> __ss_pad1;

  @__int64_t()
  external int __ss_align;

  @ffi.Array.multi([112])
  external ffi.Array<ffi.Char> __ss_pad2;
}

class msghdr extends ffi.Struct {
  external ffi.Pointer<ffi.Void> msg_name;

  @socklen_t()
  external int msg_namelen;

  external ffi.Pointer<iovec> msg_iov;

  @ffi.Int()
  external int msg_iovlen;

  external ffi.Pointer<ffi.Void> msg_control;

  @socklen_t()
  external int msg_controllen;

  @ffi.Int()
  external int msg_flags;
}

class cmsghdr extends ffi.Struct {
  @socklen_t()
  external int cmsg_len;

  @ffi.Int()
  external int cmsg_level;

  @ffi.Int()
  external int cmsg_type;
}

class sf_hdtr extends ffi.Struct {
  external ffi.Pointer<iovec> headers;

  @ffi.Int()
  external int hdr_cnt;

  external ffi.Pointer<iovec> trailers;

  @ffi.Int()
  external int trl_cnt;
}

typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;
typedef off_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef sa_endpoints_t = sa_endpoints;
typedef sae_associd_t = __uint32_t;
typedef sae_connid_t = __uint32_t;

class in_addr extends ffi.Struct {
  @in_addr_t()
  external int s_addr;
}

typedef in_addr_t = __uint32_t;

class sockaddr_in extends ffi.Struct {
  @__uint8_t()
  external int sin_len;

  @sa_family_t()
  external int sin_family;

  @in_port_t()
  external int sin_port;

  external in_addr sin_addr;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> sin_zero;
}

typedef in_port_t = __uint16_t;

class ip_opts extends ffi.Struct {
  external in_addr ip_dst;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> ip_opts1;
}

class ip_mreq extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;
}

class ip_mreqn extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_address;

  @ffi.Int()
  external int imr_ifindex;
}

class ip_mreq_source extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_sourceaddr;

  external in_addr imr_interface;
}

@ffi.Packed(4)
class group_req extends ffi.Struct {
  @ffi.Uint32()
  external int gr_interface;

  external sockaddr_storage gr_group;
}

@ffi.Packed(4)
class group_source_req extends ffi.Struct {
  @ffi.Uint32()
  external int gsr_interface;

  external sockaddr_storage gsr_group;

  external sockaddr_storage gsr_source;
}

@ffi.Packed(4)
class __msfilterreq extends ffi.Struct {
  @ffi.Uint32()
  external int msfr_ifindex;

  @ffi.Uint32()
  external int msfr_fmode;

  @ffi.Uint32()
  external int msfr_nsrcs;

  @ffi.Uint32()
  external int __msfr_align;

  external sockaddr_storage msfr_group;

  external ffi.Pointer<sockaddr_storage> msfr_srcs;
}

class in_pktinfo extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ipi_ifindex;

  external in_addr ipi_spec_dst;

  external in_addr ipi_addr;
}

class in6_addr extends ffi.Struct {
  external UnnamedUnion1 __u6_addr;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<__uint8_t> __u6_addr8;

  @ffi.Array.multi([8])
  external ffi.Array<__uint16_t> __u6_addr16;

  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> __u6_addr32;
}

class sockaddr_in6 extends ffi.Struct {
  @__uint8_t()
  external int sin6_len;

  @sa_family_t()
  external int sin6_family;

  @in_port_t()
  external int sin6_port;

  @__uint32_t()
  external int sin6_flowinfo;

  external in6_addr sin6_addr;

  @__uint32_t()
  external int sin6_scope_id;
}

class ipv6_mreq extends ffi.Struct {
  external in6_addr ipv6mr_multiaddr;

  @ffi.UnsignedInt()
  external int ipv6mr_interface;
}

class in6_pktinfo extends ffi.Struct {
  external in6_addr ipi6_addr;

  @ffi.UnsignedInt()
  external int ipi6_ifindex;
}

class ip6_mtuinfo extends ffi.Struct {
  external sockaddr_in6 ip6m_addr;

  @ffi.Uint32()
  external int ip6m_mtu;
}

class hostent extends ffi.Struct {
  external ffi.Pointer<ffi.Char> h_name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> h_aliases;

  @ffi.Int()
  external int h_addrtype;

  @ffi.Int()
  external int h_length;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> h_addr_list;
}

class netent extends ffi.Struct {
  external ffi.Pointer<ffi.Char> n_name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> n_aliases;

  @ffi.Int()
  external int n_addrtype;

  @ffi.Uint32()
  external int n_net;
}

class servent extends ffi.Struct {
  external ffi.Pointer<ffi.Char> s_name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> s_aliases;

  @ffi.Int()
  external int s_port;

  external ffi.Pointer<ffi.Char> s_proto;
}

class protoent extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p_name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> p_aliases;

  @ffi.Int()
  external int p_proto;
}

class addrinfo extends ffi.Struct {
  @ffi.Int()
  external int ai_flags;

  @ffi.Int()
  external int ai_family;

  @ffi.Int()
  external int ai_socktype;

  @ffi.Int()
  external int ai_protocol;

  @socklen_t()
  external int ai_addrlen;

  external ffi.Pointer<ffi.Char> ai_canonname;

  external ffi.Pointer<sockaddr> ai_addr;

  external ffi.Pointer<addrinfo> ai_next;
}

class rpcent extends ffi.Struct {
  external ffi.Pointer<ffi.Char> r_name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> r_aliases;

  @ffi.Int()
  external int r_number;
}

typedef __darwin_size_t = ffi.UnsignedLong;

class bpf_program extends ffi.Struct {
  @u_int()
  external int bf_len;

  external ffi.Pointer<bpf_insn> bf_insns;
}

typedef u_int = ffi.UnsignedInt;

class bpf_insn extends ffi.Struct {
  @u_short()
  external int code;

  @u_char()
  external int jt;

  @u_char()
  external int jf;

  @bpf_u_int32()
  external int k;
}

typedef u_short = ffi.UnsignedShort;
typedef u_char = ffi.UnsignedChar;
typedef bpf_u_int32 = u_int;

class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

class __sFILEX extends ffi.Opaque {}

class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef FILE = __sFILE;
typedef va_list = __darwin_va_list;
typedef __darwin_va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;

class pcap extends ffi.Opaque {}

class pcap_dumper extends ffi.Opaque {}

class pcap_if extends ffi.Struct {
  external ffi.Pointer<pcap_if> next;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  external ffi.Pointer<pcap_addr> addresses;

  @bpf_u_int32()
  external int flags;
}

class pcap_addr extends ffi.Struct {
  external ffi.Pointer<pcap_addr> next;

  external ffi.Pointer<sockaddr> addr;

  external ffi.Pointer<sockaddr> netmask;

  external ffi.Pointer<sockaddr> broadaddr;

  external ffi.Pointer<sockaddr> dstaddr;
}

class pcap_file_header extends ffi.Struct {
  @bpf_u_int32()
  external int magic;

  @u_short()
  external int version_major;

  @u_short()
  external int version_minor;

  @bpf_int32()
  external int thiszone;

  @bpf_u_int32()
  external int sigfigs;

  @bpf_u_int32()
  external int snaplen;

  @bpf_u_int32()
  external int linktype;
}

typedef bpf_int32 = ffi.Int;

abstract class pcap_direction_t {
  static const int PCAP_D_INOUT = 0;
  static const int PCAP_D_IN = 1;
  static const int PCAP_D_OUT = 2;
}

class pcap_pkthdr extends ffi.Struct {
  external timeval ts;

  @bpf_u_int32()
  external int caplen;

  @bpf_u_int32()
  external int len;
}

class pcap_stat extends ffi.Struct {
  @u_int()
  external int ps_recv;

  @u_int()
  external int ps_drop;

  @u_int()
  external int ps_ifdrop;
}

typedef pcap_t = pcap;
typedef pcap_handler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<u_char>, ffi.Pointer<pcap_pkthdr>,
            ffi.Pointer<u_char>)>>;
typedef pcap_dumper_t = pcap_dumper;
typedef pcap_if_t = pcap_if;

class pcap_rmtauth extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> username;

  external ffi.Pointer<ffi.Char> password;
}

class pcap_samp extends ffi.Struct {
  @ffi.Int()
  external int method;

  @ffi.Int()
  external int value;
}

const String __PRI_8_LENGTH_MODIFIER__ = 'hh';

const String __PRI_64_LENGTH_MODIFIER__ = 'll';

const String __SCN_64_LENGTH_MODIFIER__ = 'll';

const String __PRI_MAX_LENGTH_MODIFIER__ = 'j';

const String __SCN_MAX_LENGTH_MODIFIER__ = 'j';

const String PRId8 = 'hhd';

const String PRIi8 = 'hhi';

const String PRIo8 = 'hho';

const String PRIu8 = 'hhu';

const String PRIx8 = 'hhx';

const String PRIX8 = 'hhX';

const String PRId16 = 'hd';

const String PRIi16 = 'hi';

const String PRIo16 = 'ho';

const String PRIu16 = 'hu';

const String PRIx16 = 'hx';

const String PRIX16 = 'hX';

const String PRId32 = 'd';

const String PRIi32 = 'i';

const String PRIo32 = 'o';

const String PRIu32 = 'u';

const String PRIx32 = 'x';

const String PRIX32 = 'X';

const String PRId64 = 'lld';

const String PRIi64 = 'lli';

const String PRIo64 = 'llo';

const String PRIu64 = 'llu';

const String PRIx64 = 'llx';

const String PRIX64 = 'llX';

const String PRIdLEAST8 = 'hhd';

const String PRIiLEAST8 = 'hhi';

const String PRIoLEAST8 = 'hho';

const String PRIuLEAST8 = 'hhu';

const String PRIxLEAST8 = 'hhx';

const String PRIXLEAST8 = 'hhX';

const String PRIdLEAST16 = 'hd';

const String PRIiLEAST16 = 'hi';

const String PRIoLEAST16 = 'ho';

const String PRIuLEAST16 = 'hu';

const String PRIxLEAST16 = 'hx';

const String PRIXLEAST16 = 'hX';

const String PRIdLEAST32 = 'd';

const String PRIiLEAST32 = 'i';

const String PRIoLEAST32 = 'o';

const String PRIuLEAST32 = 'u';

const String PRIxLEAST32 = 'x';

const String PRIXLEAST32 = 'X';

const String PRIdLEAST64 = 'lld';

const String PRIiLEAST64 = 'lli';

const String PRIoLEAST64 = 'llo';

const String PRIuLEAST64 = 'llu';

const String PRIxLEAST64 = 'llx';

const String PRIXLEAST64 = 'llX';

const String PRIdFAST8 = 'hhd';

const String PRIiFAST8 = 'hhi';

const String PRIoFAST8 = 'hho';

const String PRIuFAST8 = 'hhu';

const String PRIxFAST8 = 'hhx';

const String PRIXFAST8 = 'hhX';

const String PRIdFAST16 = 'hd';

const String PRIiFAST16 = 'hi';

const String PRIoFAST16 = 'ho';

const String PRIuFAST16 = 'hu';

const String PRIxFAST16 = 'hx';

const String PRIXFAST16 = 'hX';

const String PRIdFAST32 = 'd';

const String PRIiFAST32 = 'i';

const String PRIoFAST32 = 'o';

const String PRIuFAST32 = 'u';

const String PRIxFAST32 = 'x';

const String PRIXFAST32 = 'X';

const String PRIdFAST64 = 'lld';

const String PRIiFAST64 = 'lli';

const String PRIoFAST64 = 'llo';

const String PRIuFAST64 = 'llu';

const String PRIxFAST64 = 'llx';

const String PRIXFAST64 = 'llX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String PRIdMAX = 'jd';

const String PRIiMAX = 'ji';

const String PRIoMAX = 'jo';

const String PRIuMAX = 'ju';

const String PRIxMAX = 'jx';

const String PRIXMAX = 'jX';

const String SCNd8 = 'hhd';

const String SCNi8 = 'hhi';

const String SCNo8 = 'hho';

const String SCNu8 = 'hhu';

const String SCNx8 = 'hhx';

const String SCNd16 = 'hd';

const String SCNi16 = 'hi';

const String SCNo16 = 'ho';

const String SCNu16 = 'hu';

const String SCNx16 = 'hx';

const String SCNd32 = 'd';

const String SCNi32 = 'i';

const String SCNo32 = 'o';

const String SCNu32 = 'u';

const String SCNx32 = 'x';

const String SCNd64 = 'lld';

const String SCNi64 = 'lli';

const String SCNo64 = 'llo';

const String SCNu64 = 'llu';

const String SCNx64 = 'llx';

const String SCNdLEAST8 = 'hhd';

const String SCNiLEAST8 = 'hhi';

const String SCNoLEAST8 = 'hho';

const String SCNuLEAST8 = 'hhu';

const String SCNxLEAST8 = 'hhx';

const String SCNdLEAST16 = 'hd';

const String SCNiLEAST16 = 'hi';

const String SCNoLEAST16 = 'ho';

const String SCNuLEAST16 = 'hu';

const String SCNxLEAST16 = 'hx';

const String SCNdLEAST32 = 'd';

const String SCNiLEAST32 = 'i';

const String SCNoLEAST32 = 'o';

const String SCNuLEAST32 = 'u';

const String SCNxLEAST32 = 'x';

const String SCNdLEAST64 = 'lld';

const String SCNiLEAST64 = 'lli';

const String SCNoLEAST64 = 'llo';

const String SCNuLEAST64 = 'llu';

const String SCNxLEAST64 = 'llx';

const String SCNdFAST8 = 'hhd';

const String SCNiFAST8 = 'hhi';

const String SCNoFAST8 = 'hho';

const String SCNuFAST8 = 'hhu';

const String SCNxFAST8 = 'hhx';

const String SCNdFAST16 = 'hd';

const String SCNiFAST16 = 'hi';

const String SCNoFAST16 = 'ho';

const String SCNuFAST16 = 'hu';

const String SCNxFAST16 = 'hx';

const String SCNdFAST32 = 'd';

const String SCNiFAST32 = 'i';

const String SCNoFAST32 = 'o';

const String SCNuFAST32 = 'u';

const String SCNxFAST32 = 'x';

const String SCNdFAST64 = 'lld';

const String SCNiFAST64 = 'lli';

const String SCNoFAST64 = 'llo';

const String SCNuFAST64 = 'llu';

const String SCNxFAST64 = 'llx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const String SCNdMAX = 'jd';

const String SCNiMAX = 'ji';

const String SCNoMAX = 'jo';

const String SCNuMAX = 'ju';

const String SCNxMAX = 'jx';

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_13_0 = 130000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 130000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 130100;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int _FORTIFY_SOURCE = 2;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int NBBY = 8;

const int FD_SETSIZE = 1024;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int ITIMER_PROF = 2;

const int DST_NONE = 0;

const int DST_USA = 1;

const int DST_AUST = 2;

const int DST_WET = 3;

const int DST_MET = 4;

const int DST_EET = 5;

const int DST_CAN = 6;

const int NULL = 0;

const int TIME_UTC = 1;

const int KEV_INET_SUBCLASS = 1;

const int KEV_INET_NEW_ADDR = 1;

const int KEV_INET_CHANGED_ADDR = 2;

const int KEV_INET_ADDR_DELETED = 3;

const int KEV_INET_SIFDSTADDR = 4;

const int KEV_INET_SIFBRDADDR = 5;

const int KEV_INET_SIFNETMASK = 6;

const int KEV_INET_ARPCOLLISION = 7;

const int KEV_INET_PORTINUSE = 8;

const int KEV_INET_ARPRTRFAILURE = 9;

const int KEV_INET_ARPRTRALIVE = 10;

const int KEV_DL_SUBCLASS = 2;

const int KEV_DL_SIFFLAGS = 1;

const int KEV_DL_SIFMETRICS = 2;

const int KEV_DL_SIFMTU = 3;

const int KEV_DL_SIFPHYS = 4;

const int KEV_DL_SIFMEDIA = 5;

const int KEV_DL_SIFGENERIC = 6;

const int KEV_DL_ADDMULTI = 7;

const int KEV_DL_DELMULTI = 8;

const int KEV_DL_IF_ATTACHED = 9;

const int KEV_DL_IF_DETACHING = 10;

const int KEV_DL_IF_DETACHED = 11;

const int KEV_DL_LINK_OFF = 12;

const int KEV_DL_LINK_ON = 13;

const int KEV_DL_PROTO_ATTACHED = 14;

const int KEV_DL_PROTO_DETACHED = 15;

const int KEV_DL_LINK_ADDRESS_CHANGED = 16;

const int KEV_DL_WAKEFLAGS_CHANGED = 17;

const int KEV_DL_IF_IDLE_ROUTE_REFCNT = 18;

const int KEV_DL_IFCAP_CHANGED = 19;

const int KEV_DL_LINK_QUALITY_METRIC_CHANGED = 20;

const int KEV_DL_NODE_PRESENCE = 21;

const int KEV_DL_NODE_ABSENCE = 22;

const int KEV_DL_PRIMARY_ELECTED = 23;

const int KEV_DL_ISSUES = 24;

const int KEV_DL_IFDELEGATE_CHANGED = 25;

const int KEV_DL_AWDL_RESTRICTED = 26;

const int KEV_DL_AWDL_UNRESTRICTED = 27;

const int KEV_DL_RRC_STATE_CHANGED = 28;

const int KEV_DL_QOS_MODE_CHANGED = 29;

const int KEV_DL_LOW_POWER_MODE_CHANGED = 30;

const int KEV_DL_MASTER_ELECTED = 23;

const int KEV_INET6_SUBCLASS = 6;

const int KEV_INET6_NEW_USER_ADDR = 1;

const int KEV_INET6_CHANGED_ADDR = 2;

const int KEV_INET6_ADDR_DELETED = 3;

const int KEV_INET6_NEW_LL_ADDR = 4;

const int KEV_INET6_NEW_RTADV_ADDR = 5;

const int KEV_INET6_DEFROUTER = 6;

const int KEV_INET6_REQUEST_NAT64_PREFIX = 7;

const int SOCK_STREAM = 1;

const int SOCK_DGRAM = 2;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SO_DEBUG = 1;

const int SO_ACCEPTCONN = 2;

const int SO_REUSEADDR = 4;

const int SO_KEEPALIVE = 8;

const int SO_DONTROUTE = 16;

const int SO_BROADCAST = 32;

const int SO_USELOOPBACK = 64;

const int SO_LINGER = 128;

const int SO_LINGER_SEC = 4224;

const int SO_OOBINLINE = 256;

const int SO_REUSEPORT = 512;

const int SO_TIMESTAMP = 1024;

const int SO_TIMESTAMP_MONOTONIC = 2048;

const int SO_DONTTRUNC = 8192;

const int SO_WANTMORE = 16384;

const int SO_WANTOOBFLAG = 32768;

const int SO_SNDBUF = 4097;

const int SO_RCVBUF = 4098;

const int SO_SNDLOWAT = 4099;

const int SO_RCVLOWAT = 4100;

const int SO_SNDTIMEO = 4101;

const int SO_RCVTIMEO = 4102;

const int SO_ERROR = 4103;

const int SO_TYPE = 4104;

const int SO_LABEL = 4112;

const int SO_PEERLABEL = 4113;

const int SO_NREAD = 4128;

const int SO_NKE = 4129;

const int SO_NOSIGPIPE = 4130;

const int SO_NOADDRERR = 4131;

const int SO_NWRITE = 4132;

const int SO_REUSESHAREUID = 4133;

const int SO_NOTIFYCONFLICT = 4134;

const int SO_UPCALLCLOSEWAIT = 4135;

const int SO_RANDOMPORT = 4226;

const int SO_NP_EXTENSIONS = 4227;

const int SO_NUMRCVPKT = 4370;

const int SO_NET_SERVICE_TYPE = 4374;

const int SO_NETSVC_MARKING_LEVEL = 4377;

const int SO_RESOLVER_SIGNATURE = 4401;

const int NET_SERVICE_TYPE_BE = 0;

const int NET_SERVICE_TYPE_BK = 1;

const int NET_SERVICE_TYPE_SIG = 2;

const int NET_SERVICE_TYPE_VI = 3;

const int NET_SERVICE_TYPE_VO = 4;

const int NET_SERVICE_TYPE_RV = 5;

const int NET_SERVICE_TYPE_AV = 6;

const int NET_SERVICE_TYPE_OAM = 7;

const int NET_SERVICE_TYPE_RD = 8;

const int NETSVC_MRKNG_UNKNOWN = 0;

const int NETSVC_MRKNG_LVL_L2 = 1;

const int NETSVC_MRKNG_LVL_L3L2_ALL = 2;

const int NETSVC_MRKNG_LVL_L3L2_BK = 3;

const int SAE_ASSOCID_ANY = 0;

const int SAE_CONNID_ANY = 0;

const int CONNECT_RESUME_ON_READ_WRITE = 1;

const int CONNECT_DATA_IDEMPOTENT = 2;

const int CONNECT_DATA_AUTHENTICATED = 4;

const int SONPX_SETOPTSHUT = 1;

const int SOL_SOCKET = 65535;

const int AF_UNSPEC = 0;

const int AF_UNIX = 1;

const int AF_LOCAL = 1;

const int AF_INET = 2;

const int AF_IMPLINK = 3;

const int AF_PUP = 4;

const int AF_CHAOS = 5;

const int AF_NS = 6;

const int AF_ISO = 7;

const int AF_OSI = 7;

const int AF_ECMA = 8;

const int AF_DATAKIT = 9;

const int AF_CCITT = 10;

const int AF_SNA = 11;

const int AF_DECnet = 12;

const int AF_DLI = 13;

const int AF_LAT = 14;

const int AF_HYLINK = 15;

const int AF_APPLETALK = 16;

const int AF_ROUTE = 17;

const int AF_LINK = 18;

const int pseudo_AF_XTP = 19;

const int AF_COIP = 20;

const int AF_CNT = 21;

const int pseudo_AF_RTIP = 22;

const int AF_IPX = 23;

const int AF_SIP = 24;

const int pseudo_AF_PIP = 25;

const int AF_NDRV = 27;

const int AF_ISDN = 28;

const int AF_E164 = 28;

const int pseudo_AF_KEY = 29;

const int AF_INET6 = 30;

const int AF_NATM = 31;

const int AF_SYSTEM = 32;

const int AF_NETBIOS = 33;

const int AF_PPP = 34;

const int pseudo_AF_HDRCMPLT = 35;

const int AF_RESERVED_36 = 36;

const int AF_IEEE80211 = 37;

const int AF_UTUN = 38;

const int AF_VSOCK = 40;

const int AF_MAX = 41;

const int SOCK_MAXADDRLEN = 255;

const int _SS_MAXSIZE = 128;

const int PF_UNSPEC = 0;

const int PF_LOCAL = 1;

const int PF_UNIX = 1;

const int PF_INET = 2;

const int PF_IMPLINK = 3;

const int PF_PUP = 4;

const int PF_CHAOS = 5;

const int PF_NS = 6;

const int PF_ISO = 7;

const int PF_OSI = 7;

const int PF_ECMA = 8;

const int PF_DATAKIT = 9;

const int PF_CCITT = 10;

const int PF_SNA = 11;

const int PF_DECnet = 12;

const int PF_DLI = 13;

const int PF_LAT = 14;

const int PF_HYLINK = 15;

const int PF_APPLETALK = 16;

const int PF_ROUTE = 17;

const int PF_LINK = 18;

const int PF_XTP = 19;

const int PF_COIP = 20;

const int PF_CNT = 21;

const int PF_SIP = 24;

const int PF_IPX = 23;

const int PF_RTIP = 22;

const int PF_PIP = 25;

const int PF_NDRV = 27;

const int PF_ISDN = 28;

const int PF_KEY = 29;

const int PF_INET6 = 30;

const int PF_NATM = 31;

const int PF_SYSTEM = 32;

const int PF_NETBIOS = 33;

const int PF_PPP = 34;

const int PF_RESERVED_36 = 36;

const int PF_UTUN = 38;

const int PF_VSOCK = 40;

const int PF_MAX = 41;

const int NET_MAXID = 41;

const int NET_RT_DUMP = 1;

const int NET_RT_FLAGS = 2;

const int NET_RT_IFLIST = 3;

const int NET_RT_STAT = 4;

const int NET_RT_TRASH = 5;

const int NET_RT_IFLIST2 = 6;

const int NET_RT_DUMP2 = 7;

const int NET_RT_FLAGS_PRIV = 10;

const int NET_RT_MAXID = 11;

const int SOMAXCONN = 128;

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_EOR = 8;

const int MSG_TRUNC = 16;

const int MSG_CTRUNC = 32;

const int MSG_WAITALL = 64;

const int MSG_DONTWAIT = 128;

const int MSG_EOF = 256;

const int MSG_WAITSTREAM = 512;

const int MSG_FLUSH = 1024;

const int MSG_HOLD = 2048;

const int MSG_SEND = 4096;

const int MSG_HAVEMORE = 8192;

const int MSG_RCVMORE = 16384;

const int MSG_NEEDSA = 65536;

const int MSG_NOSIGNAL = 524288;

const int SCM_RIGHTS = 1;

const int SCM_TIMESTAMP = 2;

const int SCM_CREDS = 3;

const int SCM_TIMESTAMP_MONOTONIC = 4;

const int SHUT_RD = 0;

const int SHUT_WR = 1;

const int SHUT_RDWR = 2;

const int IPPROTO_IP = 0;

const int IPPROTO_HOPOPTS = 0;

const int IPPROTO_ICMP = 1;

const int IPPROTO_IGMP = 2;

const int IPPROTO_GGP = 3;

const int IPPROTO_IPV4 = 4;

const int IPPROTO_IPIP = 4;

const int IPPROTO_TCP = 6;

const int IPPROTO_ST = 7;

const int IPPROTO_EGP = 8;

const int IPPROTO_PIGP = 9;

const int IPPROTO_RCCMON = 10;

const int IPPROTO_NVPII = 11;

const int IPPROTO_PUP = 12;

const int IPPROTO_ARGUS = 13;

const int IPPROTO_EMCON = 14;

const int IPPROTO_XNET = 15;

const int IPPROTO_CHAOS = 16;

const int IPPROTO_UDP = 17;

const int IPPROTO_MUX = 18;

const int IPPROTO_MEAS = 19;

const int IPPROTO_HMP = 20;

const int IPPROTO_PRM = 21;

const int IPPROTO_IDP = 22;

const int IPPROTO_TRUNK1 = 23;

const int IPPROTO_TRUNK2 = 24;

const int IPPROTO_LEAF1 = 25;

const int IPPROTO_LEAF2 = 26;

const int IPPROTO_RDP = 27;

const int IPPROTO_IRTP = 28;

const int IPPROTO_TP = 29;

const int IPPROTO_BLT = 30;

const int IPPROTO_NSP = 31;

const int IPPROTO_INP = 32;

const int IPPROTO_SEP = 33;

const int IPPROTO_3PC = 34;

const int IPPROTO_IDPR = 35;

const int IPPROTO_XTP = 36;

const int IPPROTO_DDP = 37;

const int IPPROTO_CMTP = 38;

const int IPPROTO_TPXX = 39;

const int IPPROTO_IL = 40;

const int IPPROTO_IPV6 = 41;

const int IPPROTO_SDRP = 42;

const int IPPROTO_ROUTING = 43;

const int IPPROTO_FRAGMENT = 44;

const int IPPROTO_IDRP = 45;

const int IPPROTO_RSVP = 46;

const int IPPROTO_GRE = 47;

const int IPPROTO_MHRP = 48;

const int IPPROTO_BHA = 49;

const int IPPROTO_ESP = 50;

const int IPPROTO_AH = 51;

const int IPPROTO_INLSP = 52;

const int IPPROTO_SWIPE = 53;

const int IPPROTO_NHRP = 54;

const int IPPROTO_ICMPV6 = 58;

const int IPPROTO_NONE = 59;

const int IPPROTO_DSTOPTS = 60;

const int IPPROTO_AHIP = 61;

const int IPPROTO_CFTP = 62;

const int IPPROTO_HELLO = 63;

const int IPPROTO_SATEXPAK = 64;

const int IPPROTO_KRYPTOLAN = 65;

const int IPPROTO_RVD = 66;

const int IPPROTO_IPPC = 67;

const int IPPROTO_ADFS = 68;

const int IPPROTO_SATMON = 69;

const int IPPROTO_VISA = 70;

const int IPPROTO_IPCV = 71;

const int IPPROTO_CPNX = 72;

const int IPPROTO_CPHB = 73;

const int IPPROTO_WSN = 74;

const int IPPROTO_PVP = 75;

const int IPPROTO_BRSATMON = 76;

const int IPPROTO_ND = 77;

const int IPPROTO_WBMON = 78;

const int IPPROTO_WBEXPAK = 79;

const int IPPROTO_EON = 80;

const int IPPROTO_VMTP = 81;

const int IPPROTO_SVMTP = 82;

const int IPPROTO_VINES = 83;

const int IPPROTO_TTP = 84;

const int IPPROTO_IGP = 85;

const int IPPROTO_DGP = 86;

const int IPPROTO_TCF = 87;

const int IPPROTO_IGRP = 88;

const int IPPROTO_OSPFIGP = 89;

const int IPPROTO_SRPC = 90;

const int IPPROTO_LARP = 91;

const int IPPROTO_MTP = 92;

const int IPPROTO_AX25 = 93;

const int IPPROTO_IPEIP = 94;

const int IPPROTO_MICP = 95;

const int IPPROTO_SCCSP = 96;

const int IPPROTO_ETHERIP = 97;

const int IPPROTO_ENCAP = 98;

const int IPPROTO_APES = 99;

const int IPPROTO_GMTP = 100;

const int IPPROTO_PIM = 103;

const int IPPROTO_IPCOMP = 108;

const int IPPROTO_PGM = 113;

const int IPPROTO_SCTP = 132;

const int IPPROTO_DIVERT = 254;

const int IPPROTO_RAW = 255;

const int IPPROTO_MAX = 256;

const int IPPROTO_DONE = 257;

const int __DARWIN_IPPORT_RESERVED = 1024;

const int IPPORT_RESERVED = 1024;

const int IPPORT_USERRESERVED = 5000;

const int IPPORT_HIFIRSTAUTO = 49152;

const int IPPORT_HILASTAUTO = 65535;

const int IPPORT_RESERVEDSTART = 600;

const int IN_CLASSA_NET = 4278190080;

const int IN_CLASSA_NSHIFT = 24;

const int IN_CLASSA_HOST = 16777215;

const int IN_CLASSA_MAX = 128;

const int IN_CLASSB_NET = 4294901760;

const int IN_CLASSB_NSHIFT = 16;

const int IN_CLASSB_HOST = 65535;

const int IN_CLASSB_MAX = 65536;

const int IN_CLASSC_NET = 4294967040;

const int IN_CLASSC_NSHIFT = 8;

const int IN_CLASSC_HOST = 255;

const int IN_CLASSD_NET = 4026531840;

const int IN_CLASSD_NSHIFT = 28;

const int IN_CLASSD_HOST = 268435455;

const int INADDR_NONE = 4294967295;

const int IN_LOOPBACKNET = 127;

const int INET_ADDRSTRLEN = 16;

const int IP_OPTIONS = 1;

const int IP_HDRINCL = 2;

const int IP_TOS = 3;

const int IP_TTL = 4;

const int IP_RECVOPTS = 5;

const int IP_RECVRETOPTS = 6;

const int IP_RECVDSTADDR = 7;

const int IP_RETOPTS = 8;

const int IP_MULTICAST_IF = 9;

const int IP_MULTICAST_TTL = 10;

const int IP_MULTICAST_LOOP = 11;

const int IP_ADD_MEMBERSHIP = 12;

const int IP_DROP_MEMBERSHIP = 13;

const int IP_MULTICAST_VIF = 14;

const int IP_RSVP_ON = 15;

const int IP_RSVP_OFF = 16;

const int IP_RSVP_VIF_ON = 17;

const int IP_RSVP_VIF_OFF = 18;

const int IP_PORTRANGE = 19;

const int IP_RECVIF = 20;

const int IP_IPSEC_POLICY = 21;

const int IP_FAITH = 22;

const int IP_STRIPHDR = 23;

const int IP_RECVTTL = 24;

const int IP_BOUND_IF = 25;

const int IP_PKTINFO = 26;

const int IP_RECVPKTINFO = 26;

const int IP_RECVTOS = 27;

const int IP_DONTFRAG = 28;

const int IP_FW_ADD = 40;

const int IP_FW_DEL = 41;

const int IP_FW_FLUSH = 42;

const int IP_FW_ZERO = 43;

const int IP_FW_GET = 44;

const int IP_FW_RESETLOG = 45;

const int IP_OLD_FW_ADD = 50;

const int IP_OLD_FW_DEL = 51;

const int IP_OLD_FW_FLUSH = 52;

const int IP_OLD_FW_ZERO = 53;

const int IP_OLD_FW_GET = 54;

const int IP_NAT__XXX = 55;

const int IP_OLD_FW_RESETLOG = 56;

const int IP_DUMMYNET_CONFIGURE = 60;

const int IP_DUMMYNET_DEL = 61;

const int IP_DUMMYNET_FLUSH = 62;

const int IP_DUMMYNET_GET = 64;

const int IP_TRAFFIC_MGT_BACKGROUND = 65;

const int IP_MULTICAST_IFINDEX = 66;

const int IP_ADD_SOURCE_MEMBERSHIP = 70;

const int IP_DROP_SOURCE_MEMBERSHIP = 71;

const int IP_BLOCK_SOURCE = 72;

const int IP_UNBLOCK_SOURCE = 73;

const int IP_MSFILTER = 74;

const int MCAST_JOIN_GROUP = 80;

const int MCAST_LEAVE_GROUP = 81;

const int MCAST_JOIN_SOURCE_GROUP = 82;

const int MCAST_LEAVE_SOURCE_GROUP = 83;

const int MCAST_BLOCK_SOURCE = 84;

const int MCAST_UNBLOCK_SOURCE = 85;

const int IP_DEFAULT_MULTICAST_TTL = 1;

const int IP_DEFAULT_MULTICAST_LOOP = 1;

const int IP_MIN_MEMBERSHIPS = 31;

const int IP_MAX_MEMBERSHIPS = 4095;

const int IP_MAX_GROUP_SRC_FILTER = 512;

const int IP_MAX_SOCK_SRC_FILTER = 128;

const int IP_MAX_SOCK_MUTE_FILTER = 128;

const int MCAST_UNDEFINED = 0;

const int MCAST_INCLUDE = 1;

const int MCAST_EXCLUDE = 2;

const int IP_PORTRANGE_DEFAULT = 0;

const int IP_PORTRANGE_HIGH = 1;

const int IP_PORTRANGE_LOW = 2;

const int IPPROTO_MAXID = 52;

const int IPCTL_FORWARDING = 1;

const int IPCTL_SENDREDIRECTS = 2;

const int IPCTL_DEFTTL = 3;

const int IPCTL_RTEXPIRE = 5;

const int IPCTL_RTMINEXPIRE = 6;

const int IPCTL_RTMAXCACHE = 7;

const int IPCTL_SOURCEROUTE = 8;

const int IPCTL_DIRECTEDBROADCAST = 9;

const int IPCTL_INTRQMAXLEN = 10;

const int IPCTL_INTRQDROPS = 11;

const int IPCTL_STATS = 12;

const int IPCTL_ACCEPTSOURCEROUTE = 13;

const int IPCTL_FASTFORWARDING = 14;

const int IPCTL_KEEPFAITH = 15;

const int IPCTL_GIF_TTL = 16;

const int IPCTL_MAXID = 17;

const String __KAME_VERSION = '2009/apple-darwin';

const int IPV6PORT_RESERVED = 1024;

const int IPV6PORT_ANONMIN = 49152;

const int IPV6PORT_ANONMAX = 65535;

const int IPV6PORT_RESERVEDMIN = 600;

const int IPV6PORT_RESERVEDMAX = 1023;

const int INET6_ADDRSTRLEN = 46;

const int __IPV6_ADDR_SCOPE_NODELOCAL = 1;

const int __IPV6_ADDR_SCOPE_INTFACELOCAL = 1;

const int __IPV6_ADDR_SCOPE_LINKLOCAL = 2;

const int __IPV6_ADDR_SCOPE_SITELOCAL = 5;

const int __IPV6_ADDR_SCOPE_ORGLOCAL = 8;

const int __IPV6_ADDR_SCOPE_GLOBAL = 14;

const int IPV6_ADDR_MC_FLAGS_TRANSIENT = 16;

const int IPV6_ADDR_MC_FLAGS_PREFIX = 32;

const int IPV6_ADDR_MC_FLAGS_UNICAST_BASED = 48;

const int IPV6_SOCKOPT_RESERVED1 = 3;

const int IPV6_UNICAST_HOPS = 4;

const int IPV6_MULTICAST_IF = 9;

const int IPV6_MULTICAST_HOPS = 10;

const int IPV6_MULTICAST_LOOP = 11;

const int IPV6_JOIN_GROUP = 12;

const int IPV6_LEAVE_GROUP = 13;

const int IPV6_PORTRANGE = 14;

const int ICMP6_FILTER = 18;

const int IPV6_2292PKTINFO = 19;

const int IPV6_2292HOPLIMIT = 20;

const int IPV6_2292NEXTHOP = 21;

const int IPV6_2292HOPOPTS = 22;

const int IPV6_2292DSTOPTS = 23;

const int IPV6_2292RTHDR = 24;

const int IPV6_2292PKTOPTIONS = 25;

const int IPV6_CHECKSUM = 26;

const int IPV6_V6ONLY = 27;

const int IPV6_BINDV6ONLY = 27;

const int IPV6_IPSEC_POLICY = 28;

const int IPV6_FAITH = 29;

const int IPV6_FW_ADD = 30;

const int IPV6_FW_DEL = 31;

const int IPV6_FW_FLUSH = 32;

const int IPV6_FW_ZERO = 33;

const int IPV6_FW_GET = 34;

const int IPV6_RECVTCLASS = 35;

const int IPV6_TCLASS = 36;

const int IPV6_BOUND_IF = 125;

const int IPV6_RTHDR_LOOSE = 0;

const int IPV6_RTHDR_STRICT = 1;

const int IPV6_RTHDR_TYPE_0 = 0;

const int IPV6_DEFAULT_MULTICAST_HOPS = 1;

const int IPV6_DEFAULT_MULTICAST_LOOP = 1;

const int IPV6_MIN_MEMBERSHIPS = 31;

const int IPV6_MAX_MEMBERSHIPS = 4095;

const int IPV6_MAX_GROUP_SRC_FILTER = 512;

const int IPV6_MAX_SOCK_SRC_FILTER = 128;

const int IPV6_PORTRANGE_DEFAULT = 0;

const int IPV6_PORTRANGE_HIGH = 1;

const int IPV6_PORTRANGE_LOW = 2;

const int IPV6PROTO_MAXID = 104;

const int IPV6CTL_FORWARDING = 1;

const int IPV6CTL_SENDREDIRECTS = 2;

const int IPV6CTL_DEFHLIM = 3;

const int IPV6CTL_FORWSRCRT = 5;

const int IPV6CTL_STATS = 6;

const int IPV6CTL_MRTSTATS = 7;

const int IPV6CTL_MRTPROTO = 8;

const int IPV6CTL_MAXFRAGPACKETS = 9;

const int IPV6CTL_SOURCECHECK = 10;

const int IPV6CTL_SOURCECHECK_LOGINT = 11;

const int IPV6CTL_ACCEPT_RTADV = 12;

const int IPV6CTL_KEEPFAITH = 13;

const int IPV6CTL_LOG_INTERVAL = 14;

const int IPV6CTL_HDRNESTLIMIT = 15;

const int IPV6CTL_DAD_COUNT = 16;

const int IPV6CTL_AUTO_FLOWLABEL = 17;

const int IPV6CTL_DEFMCASTHLIM = 18;

const int IPV6CTL_GIF_HLIM = 19;

const int IPV6CTL_KAME_VERSION = 20;

const int IPV6CTL_USE_DEPRECATED = 21;

const int IPV6CTL_RR_PRUNE = 22;

const int IPV6CTL_V6ONLY = 24;

const int IPV6CTL_RTEXPIRE = 25;

const int IPV6CTL_RTMINEXPIRE = 26;

const int IPV6CTL_RTMAXCACHE = 27;

const int IPV6CTL_USETEMPADDR = 32;

const int IPV6CTL_TEMPPLTIME = 33;

const int IPV6CTL_TEMPVLTIME = 34;

const int IPV6CTL_AUTO_LINKLOCAL = 35;

const int IPV6CTL_RIP6STATS = 36;

const int IPV6CTL_PREFER_TEMPADDR = 37;

const int IPV6CTL_ADDRCTLPOLICY = 38;

const int IPV6CTL_USE_DEFAULTZONE = 39;

const int IPV6CTL_MAXFRAGS = 41;

const int IPV6CTL_MCAST_PMTU = 44;

const int IPV6CTL_NEIGHBORGCTHRESH = 46;

const int IPV6CTL_MAXIFPREFIXES = 47;

const int IPV6CTL_MAXIFDEFROUTERS = 48;

const int IPV6CTL_MAXDYNROUTES = 49;

const int ICMPV6CTL_ND6_ONLINKNSRFC4861 = 50;

const int IPV6CTL_ULA_USETEMPADDR = 51;

const int IPV6CTL_MAXID = 51;

const String _PATH_HEQUIV = '/etc/hosts.equiv';

const String _PATH_HOSTS = '/etc/hosts';

const String _PATH_NETWORKS = '/etc/networks';

const String _PATH_PROTOCOLS = '/etc/protocols';

const String _PATH_SERVICES = '/etc/services';

const int NETDB_INTERNAL = -1;

const int NETDB_SUCCESS = 0;

const int HOST_NOT_FOUND = 1;

const int TRY_AGAIN = 2;

const int NO_RECOVERY = 3;

const int NO_DATA = 4;

const int NO_ADDRESS = 4;

const int EAI_ADDRFAMILY = 1;

const int EAI_AGAIN = 2;

const int EAI_BADFLAGS = 3;

const int EAI_FAIL = 4;

const int EAI_FAMILY = 5;

const int EAI_MEMORY = 6;

const int EAI_NODATA = 7;

const int EAI_NONAME = 8;

const int EAI_SERVICE = 9;

const int EAI_SOCKTYPE = 10;

const int EAI_SYSTEM = 11;

const int EAI_BADHINTS = 12;

const int EAI_PROTOCOL = 13;

const int EAI_OVERFLOW = 14;

const int EAI_MAX = 15;

const int AI_PASSIVE = 1;

const int AI_CANONNAME = 2;

const int AI_NUMERICHOST = 4;

const int AI_NUMERICSERV = 4096;

const int AI_MASK = 5127;

const int AI_ALL = 256;

const int AI_V4MAPPED_CFG = 512;

const int AI_ADDRCONFIG = 1024;

const int AI_V4MAPPED = 2048;

const int AI_DEFAULT = 1536;

const int AI_UNUSABLE = 268435456;

const int NI_MAXHOST = 1025;

const int NI_MAXSERV = 32;

const int NI_NOFQDN = 1;

const int NI_NUMERICHOST = 2;

const int NI_NAMEREQD = 4;

const int NI_NUMERICSERV = 8;

const int NI_NUMERICSCOPE = 256;

const int NI_DGRAM = 16;

const int NI_WITHSCOPEID = 32;

const int SCOPE_DELIMITER = 37;

const int INVALID_SOCKET = -1;

const int DLT_NULL = 0;

const int DLT_EN10MB = 1;

const int DLT_EN3MB = 2;

const int DLT_AX25 = 3;

const int DLT_PRONET = 4;

const int DLT_CHAOS = 5;

const int DLT_IEEE802 = 6;

const int DLT_ARCNET = 7;

const int DLT_SLIP = 8;

const int DLT_PPP = 9;

const int DLT_FDDI = 10;

const int DLT_ATM_RFC1483 = 11;

const int DLT_RAW = 12;

const int DLT_SLIP_BSDOS = 15;

const int DLT_PPP_BSDOS = 16;

const int DLT_PFSYNC = 18;

const int DLT_ATM_CLIP = 19;

const int DLT_REDBACK_SMARTEDGE = 32;

const int DLT_PPP_SERIAL = 50;

const int DLT_PPP_ETHER = 51;

const int DLT_SYMANTEC_FIREWALL = 99;

const int DLT_MATCHING_MIN = 104;

const int DLT_C_HDLC = 104;

const int DLT_CHDLC = 104;

const int DLT_IEEE802_11 = 105;

const int DLT_FRELAY = 107;

const int DLT_LOOP = 108;

const int DLT_ENC = 109;

const int DLT_LINUX_SLL = 113;

const int DLT_LTALK = 114;

const int DLT_ECONET = 115;

const int DLT_IPFILTER = 116;

const int DLT_PFLOG = 117;

const int DLT_CISCO_IOS = 118;

const int DLT_PRISM_HEADER = 119;

const int DLT_AIRONET_HEADER = 120;

const int DLT_HHDLC = 121;

const int DLT_IP_OVER_FC = 122;

const int DLT_SUNATM = 123;

const int DLT_RIO = 124;

const int DLT_PCI_EXP = 125;

const int DLT_AURORA = 126;

const int DLT_IEEE802_11_RADIO = 127;

const int DLT_TZSP = 128;

const int DLT_ARCNET_LINUX = 129;

const int DLT_JUNIPER_MLPPP = 130;

const int DLT_JUNIPER_MLFR = 131;

const int DLT_JUNIPER_ES = 132;

const int DLT_JUNIPER_GGSN = 133;

const int DLT_JUNIPER_MFR = 134;

const int DLT_JUNIPER_ATM2 = 135;

const int DLT_JUNIPER_SERVICES = 136;

const int DLT_JUNIPER_ATM1 = 137;

const int DLT_APPLE_IP_OVER_IEEE1394 = 138;

const int DLT_MTP2_WITH_PHDR = 139;

const int DLT_MTP2 = 140;

const int DLT_MTP3 = 141;

const int DLT_SCCP = 142;

const int DLT_DOCSIS = 143;

const int DLT_LINUX_IRDA = 144;

const int DLT_IBM_SP = 145;

const int DLT_IBM_SN = 146;

const int DLT_USER0 = 147;

const int DLT_USER1 = 148;

const int DLT_USER2 = 149;

const int DLT_USER3 = 150;

const int DLT_USER4 = 151;

const int DLT_USER5 = 152;

const int DLT_USER6 = 153;

const int DLT_USER7 = 154;

const int DLT_USER8 = 155;

const int DLT_USER9 = 156;

const int DLT_USER10 = 157;

const int DLT_USER11 = 158;

const int DLT_USER12 = 159;

const int DLT_USER13 = 160;

const int DLT_USER14 = 161;

const int DLT_USER15 = 162;

const int DLT_PCAPNG = 151;

const int DLT_IEEE802_11_RADIO_AVS = 163;

const int DLT_JUNIPER_MONITOR = 164;

const int DLT_BACNET_MS_TP = 165;

const int DLT_PPP_PPPD = 166;

const int DLT_PPP_WITH_DIRECTION = 166;

const int DLT_LINUX_PPP_WITHDIRECTION = 166;

const int DLT_JUNIPER_PPPOE = 167;

const int DLT_JUNIPER_PPPOE_ATM = 168;

const int DLT_GPRS_LLC = 169;

const int DLT_GPF_T = 170;

const int DLT_GPF_F = 171;

const int DLT_GCOM_T1E1 = 172;

const int DLT_GCOM_SERIAL = 173;

const int DLT_JUNIPER_PIC_PEER = 174;

const int DLT_ERF_ETH = 175;

const int DLT_ERF_POS = 176;

const int DLT_LINUX_LAPD = 177;

const int DLT_JUNIPER_ETHER = 178;

const int DLT_JUNIPER_PPP = 179;

const int DLT_JUNIPER_FRELAY = 180;

const int DLT_JUNIPER_CHDLC = 181;

const int DLT_MFR = 182;

const int DLT_JUNIPER_VP = 183;

const int DLT_A429 = 184;

const int DLT_A653_ICM = 185;

const int DLT_USB_FREEBSD = 186;

const int DLT_USB = 186;

const int DLT_BLUETOOTH_HCI_H4 = 187;

const int DLT_IEEE802_16_MAC_CPS = 188;

const int DLT_USB_LINUX = 189;

const int DLT_CAN20B = 190;

const int DLT_IEEE802_15_4_LINUX = 191;

const int DLT_PPI = 192;

const int DLT_IEEE802_16_MAC_CPS_RADIO = 193;

const int DLT_JUNIPER_ISM = 194;

const int DLT_IEEE802_15_4_WITHFCS = 195;

const int DLT_IEEE802_15_4 = 195;

const int DLT_SITA = 196;

const int DLT_ERF = 197;

const int DLT_RAIF1 = 198;

const int DLT_IPMB_KONTRON = 199;

const int DLT_JUNIPER_ST = 200;

const int DLT_BLUETOOTH_HCI_H4_WITH_PHDR = 201;

const int DLT_AX25_KISS = 202;

const int DLT_LAPD = 203;

const int DLT_PPP_WITH_DIR = 204;

const int DLT_C_HDLC_WITH_DIR = 205;

const int DLT_FRELAY_WITH_DIR = 206;

const int DLT_LAPB_WITH_DIR = 207;

const int DLT_IPMB_LINUX = 209;

const int DLT_FLEXRAY = 210;

const int DLT_MOST = 211;

const int DLT_LIN = 212;

const int DLT_X2E_SERIAL = 213;

const int DLT_X2E_XORAYA = 214;

const int DLT_IEEE802_15_4_NONASK_PHY = 215;

const int DLT_LINUX_EVDEV = 216;

const int DLT_GSMTAP_UM = 217;

const int DLT_GSMTAP_ABIS = 218;

const int DLT_MPLS = 219;

const int DLT_USB_LINUX_MMAPPED = 220;

const int DLT_DECT = 221;

const int DLT_AOS = 222;

const int DLT_WIHART = 223;

const int DLT_FC_2 = 224;

const int DLT_FC_2_WITH_FRAME_DELIMS = 225;

const int DLT_IPNET = 226;

const int DLT_CAN_SOCKETCAN = 227;

const int DLT_IPV4 = 228;

const int DLT_IPV6 = 229;

const int DLT_IEEE802_15_4_NOFCS = 230;

const int DLT_DBUS = 231;

const int DLT_JUNIPER_VS = 232;

const int DLT_JUNIPER_SRX_E2E = 233;

const int DLT_JUNIPER_FIBRECHANNEL = 234;

const int DLT_DVB_CI = 235;

const int DLT_MUX27010 = 236;

const int DLT_STANAG_5066_D_PDU = 237;

const int DLT_JUNIPER_ATM_CEMIC = 238;

const int DLT_NFLOG = 239;

const int DLT_NETANALYZER = 240;

const int DLT_NETANALYZER_TRANSPARENT = 241;

const int DLT_IPOIB = 242;

const int DLT_MPEG_2_TS = 243;

const int DLT_NG40 = 244;

const int DLT_NFC_LLCP = 245;

const int DLT_INFINIBAND = 247;

const int DLT_SCTP = 248;

const int DLT_USBPCAP = 249;

const int DLT_RTAC_SERIAL = 250;

const int DLT_BLUETOOTH_LE_LL = 251;

const int DLT_WIRESHARK_UPPER_PDU = 252;

const int DLT_NETLINK = 253;

const int DLT_BLUETOOTH_LINUX_MONITOR = 254;

const int DLT_BLUETOOTH_BREDR_BB = 255;

const int DLT_BLUETOOTH_LE_LL_WITH_PHDR = 256;

const int DLT_PROFIBUS_DL = 257;

const int DLT_PKTAP = 149;

const int DLT_EPON = 259;

const int DLT_IPMI_HPM_2 = 260;

const int DLT_ZWAVE_R1_R2 = 261;

const int DLT_ZWAVE_R3 = 262;

const int DLT_WATTSTOPPER_DLM = 263;

const int DLT_ISO_14443 = 264;

const int DLT_RDS = 265;

const int DLT_USB_DARWIN = 266;

const int DLT_OPENFLOW = 267;

const int DLT_SDLC = 268;

const int DLT_TI_LLN_SNIFFER = 269;

const int DLT_LORATAP = 270;

const int DLT_VSOCK = 271;

const int DLT_NORDIC_BLE = 272;

const int DLT_DOCSIS31_XRA31 = 273;

const int DLT_ETHERNET_MPACKET = 274;

const int DLT_DISPLAYPORT_AUX = 275;

const int DLT_LINUX_SLL2 = 276;

const int DLT_SERCOS_MONITOR = 277;

const int DLT_OPENVIZSLA = 278;

const int DLT_EBHSCR = 279;

const int DLT_VPP_DISPATCH = 280;

const int DLT_DSA_TAG_BRCM = 281;

const int DLT_DSA_TAG_BRCM_PREPEND = 282;

const int DLT_IEEE802_15_4_TAP = 283;

const int DLT_DSA_TAG_DSA = 284;

const int DLT_DSA_TAG_EDSA = 285;

const int DLT_ELEE = 286;

const int DLT_Z_WAVE_SERIAL = 287;

const int DLT_USB_2_0 = 288;

const int DLT_ATSC_ALP = 289;

const int DLT_MATCHING_MAX = 289;

const int DLT_CLASS_NETBSD_RAWAF = 35913728;

const int BPF_RELEASE = 199606;

const int BPF_LD = 0;

const int BPF_LDX = 1;

const int BPF_ST = 2;

const int BPF_STX = 3;

const int BPF_ALU = 4;

const int BPF_JMP = 5;

const int BPF_RET = 6;

const int BPF_MISC = 7;

const int BPF_W = 0;

const int BPF_H = 8;

const int BPF_B = 16;

const int BPF_IMM = 0;

const int BPF_ABS = 32;

const int BPF_IND = 64;

const int BPF_MEM = 96;

const int BPF_LEN = 128;

const int BPF_MSH = 160;

const int BPF_ADD = 0;

const int BPF_SUB = 16;

const int BPF_MUL = 32;

const int BPF_DIV = 48;

const int BPF_OR = 64;

const int BPF_AND = 80;

const int BPF_LSH = 96;

const int BPF_RSH = 112;

const int BPF_NEG = 128;

const int BPF_MOD = 144;

const int BPF_XOR = 160;

const int BPF_JA = 0;

const int BPF_JEQ = 16;

const int BPF_JGT = 32;

const int BPF_JGE = 48;

const int BPF_JSET = 64;

const int BPF_K = 0;

const int BPF_X = 8;

const int BPF_A = 16;

const int BPF_TAX = 0;

const int BPF_TXA = 128;

const int BPF_MEMWORDS = 16;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

const int PCAP_VERSION_MAJOR = 2;

const int PCAP_VERSION_MINOR = 4;

const int PCAP_ERRBUF_SIZE = 256;

const int PCAP_IF_LOOPBACK = 1;

const int PCAP_IF_UP = 2;

const int PCAP_IF_RUNNING = 4;

const int PCAP_IF_WIRELESS = 8;

const int PCAP_IF_CONNECTION_STATUS = 48;

const int PCAP_IF_CONNECTION_STATUS_UNKNOWN = 0;

const int PCAP_IF_CONNECTION_STATUS_CONNECTED = 16;

const int PCAP_IF_CONNECTION_STATUS_DISCONNECTED = 32;

const int PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE = 48;

const int PCAP_ERROR = -1;

const int PCAP_ERROR_BREAK = -2;

const int PCAP_ERROR_NOT_ACTIVATED = -3;

const int PCAP_ERROR_ACTIVATED = -4;

const int PCAP_ERROR_NO_SUCH_DEVICE = -5;

const int PCAP_ERROR_RFMON_NOTSUP = -6;

const int PCAP_ERROR_NOT_RFMON = -7;

const int PCAP_ERROR_PERM_DENIED = -8;

const int PCAP_ERROR_IFACE_NOT_UP = -9;

const int PCAP_ERROR_CANTSET_TSTAMP_TYPE = -10;

const int PCAP_ERROR_PROMISC_PERM_DENIED = -11;

const int PCAP_ERROR_TSTAMP_PRECISION_NOTSUP = -12;

const int PCAP_WARNING = 1;

const int PCAP_WARNING_PROMISC_NOTSUP = 2;

const int PCAP_WARNING_TSTAMP_TYPE_NOTSUP = 3;

const int PCAP_NETMASK_UNKNOWN = 4294967295;

const int PCAP_CHAR_ENC_LOCAL = 0;

const int PCAP_CHAR_ENC_UTF_8 = 1;

const int PCAP_TSTAMP_HOST = 0;

const int PCAP_TSTAMP_HOST_LOWPREC = 1;

const int PCAP_TSTAMP_HOST_HIPREC = 2;

const int PCAP_TSTAMP_ADAPTER = 3;

const int PCAP_TSTAMP_ADAPTER_UNSYNCED = 4;

const int PCAP_TSTAMP_HOST_HIPREC_UNSYNCED = 5;

const int PCAP_TSTAMP_PRECISION_MICRO = 0;

const int PCAP_TSTAMP_PRECISION_NANO = 1;

const int PCAP_BUF_SIZE = 1024;

const int PCAP_SRC_FILE = 2;

const int PCAP_SRC_IFLOCAL = 3;

const int PCAP_SRC_IFREMOTE = 4;

const String PCAP_SRC_FILE_STRING = 'file://';

const String PCAP_SRC_IF_STRING = 'rpcap://';

const int PCAP_OPENFLAG_PROMISCUOUS = 1;

const int PCAP_OPENFLAG_DATATX_UDP = 2;

const int PCAP_OPENFLAG_NOCAPTURE_RPCAP = 4;

const int PCAP_OPENFLAG_NOCAPTURE_LOCAL = 8;

const int PCAP_OPENFLAG_MAX_RESPONSIVENESS = 16;

const int RPCAP_RMTAUTH_NULL = 0;

const int RPCAP_RMTAUTH_PWD = 1;

const int PCAP_SAMP_NOSAMP = 0;

const int PCAP_SAMP_1_EVERY_N = 1;

const int PCAP_SAMP_FIRST_AFTER_N_MS = 2;

const int RPCAP_HOSTLIST_SIZE = 1024;
